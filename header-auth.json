[
    {
        "id": "5f40353168982c37",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "Header-based authorization (w/ expiration)",
        "info": "",
        "x": 180,
        "y": 40,
        "wires": []
    },
    {
        "id": "8d77be6450ce0f2a",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "validate authorization",
        "func": "  let TokenHeader = msg.req.headers['authorization'] || ''\n  if (TokenHeader.startsWith('Bearer')) {\n    let UserRegistry = global.get('UserRegistry') || Object.create(null)\n\n    let Token = TokenHeader.replace(/^Bearer\\s+/,'').trim()\n    if (Token !== '') {\n      let [UserId,Expiration,Digest] = Token.split(':')\n      if (\n        (UserId !== '') && (UserId in UserRegistry) && (UserRegistry[UserId] != null) &&\n        /^\\d+$/.test(Expiration) && /^[0-9a-fA-F]+$/.test(Digest)\n      ) {\n        let TokenKey = global.get('TokenKey')\n          const HMAC = crypto.createHmac('sha256',TokenKey)\n          HMAC.update(UserId + ':' + Expiration)\n        let expectedDigest = HMAC.digest('hex')\n\n        if (\n          (Digest === expectedDigest) &&\n          (parseInt(Expiration,10) >= Date.now())\n        ) {\n          let UserRoles = UserRegistry[UserId].Roles || []\n          if (\n            (msg.requiredRole == null) ||\n            (UserRoles.indexOf(msg.requiredRole) >= 0)\n          ) {\n            msg.authenticatedUser = UserId\n            msg.authorizedRoles   = UserRoles\n\n            msg.headers = msg.headers || {}\n            msg.headers['authorization'] = 'Bearer ' + Token\n            return [msg,null]                                      // authorized\n          } else {\n            msg.cookies = msg.cookies || {}\n            msg.cookies.authorization = null\n\n            msg.payload    = 'Unauthorized'\n            msg.statusCode = 401\n            return [null,msg]                                  // not authorized\n          }\n        }\n      }\n    }\n  }\n\n  msg.payload    = 'Unauthorized'\n  msg.statusCode = 401\n  return [null,msg]                                            // not authorized\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 160,
        "y": 300,
        "wires": [
            [
                "79785206c30e98c3"
            ],
            [
                "478efb8ea02f84dd"
            ]
        ]
    },
    {
        "id": "b21258d4f3b19a31",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "validate credentials",
        "func": "  let UserId   = (msg.payload.UserId  || '').toLowerCase()\n  let Password = msg.payload.Password || ''\n\n  let UserRegistry = global.get('UserRegistry') || Object.create(null)\n  if ((UserId in UserRegistry) && (UserRegistry[UserId] != null)) {\n    let UserSpecs = UserRegistry[UserId]\n    if (UserSpecs.Password === Password) {              // internal optimization\n      return withAuthorizationOf(UserId,UserSpecs.Roles || [])\n    }\n\n    let PBKDF2Iterations = global.get('PBKDF2Iterations') || 100000\n    crypto.pbkdf2(\n      Password, Buffer.from(UserSpecs.Salt,'hex'), PBKDF2Iterations, 64, 'sha512',\n      function (Error, computedHash) {\n        if ((Error == null) && (computedHash.toString('hex') === UserSpecs.Hash)) {\n          UserSpecs.Password = Password       // speeds up future auth. requests\n          return withAuthorizationOf(UserId,UserSpecs.Roles || [])\n        } else {\n          return withoutAuthorization()\n        }\n      }\n    )\n  } else {\n    return withoutAuthorization()\n  }\n\n  function withAuthorizationOf (UserName, UserRoles) {\n    if ((msg.requiredRole == null) || (UserRoles.indexOf(msg.requiredRole) >= 0)) {\n      msg.authenticatedUser = UserId\n      msg.authorizedRoles   = UserRoles\n\n      node.send([msg,null])\n      node.done()\n    } else {\n      return withoutAuthorization()\n    }\n  }\n\n  function withoutAuthorization () {\n    msg.payload    = 'Unauthorized'\n    msg.statusCode = 401\n\n    node.send([null,msg])\n    node.done()\n  }\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 150,
        "y": 420,
        "wires": [
            [
                "6e31b911deebaca2"
            ],
            [
                "d30b6243d1a61ddc"
            ]
        ]
    },
    {
        "id": "3ae11bc056bb4ea5",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "at Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "02f5a2c430d381b9"
            ]
        ]
    },
    {
        "id": "02f5a2c430d381b9",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "generate Token Key",
        "func": "  let TokenKey = global.get('TokenKey')\n  if (TokenKey == null) {     // do not change TokenKey upon Node-RED deployment\n    global.set('TokenKey',crypto.randomBytes(16).toString('hex'))\n  }\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 320,
        "y": 160,
        "wires": [
            [
                "08c6f38667b1f597"
            ]
        ]
    },
    {
        "id": "08c6f38667b1f597",
        "type": "debug",
        "z": "4e29538c45ba477d",
        "name": "Status",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'token key generated'",
        "statusType": "jsonata",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "3165fc5071ea3432",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "at Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "4c8bc88e9138d602"
            ]
        ]
    },
    {
        "id": "4c8bc88e9138d602",
        "type": "change",
        "z": "4e29538c45ba477d",
        "name": "set token lifetime",
        "rules": [
            {
                "t": "set",
                "p": "TokenLifetime",
                "pt": "global",
                "to": "2*60*1000",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "TokenLifetime",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 100,
        "wires": [
            [
                "59d1b07f62cd0149"
            ]
        ]
    },
    {
        "id": "59d1b07f62cd0149",
        "type": "debug",
        "z": "4e29538c45ba477d",
        "name": "Status",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "msg",
        "x": 530,
        "y": 100,
        "wires": []
    },
    {
        "id": "79785206c30e98c3",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "refresh token",
        "func": "  let Expiration   = Date.now() + global.get('TokenLifetime')\n  let TokenContent = msg.authenticatedUser + ':' + Expiration\n\n  let TokenKey = global.get('TokenKey')\n    const HMAC = crypto.createHmac('sha256',TokenKey)\n    HMAC.update(TokenContent)\n  let Digest = HMAC.digest('hex')\n\n  msg.headers = msg.headers || {}\n  msg.headers['authorization'] = 'Bearer ' + TokenContent + ':' + Digest\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 330,
        "y": 240,
        "wires": [
            [
                "2006e13c1c6ae4a2"
            ]
        ]
    },
    {
        "id": "6e31b911deebaca2",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "create token",
        "func": "  let Expiration   = Date.now() + global.get('TokenLifetime')\n  let TokenContent = msg.authenticatedUser + ':' + Expiration\n\n  let TokenKey = global.get('TokenKey')\n    const HMAC = crypto.createHmac('sha256',TokenKey)\n    HMAC.update(TokenContent)\n  let Digest = HMAC.digest('hex')\n\n  msg.headers = msg.headers || {}\n  msg.headers['authorization'] = 'Bearer ' + TokenContent + ':' + Digest\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 350,
        "y": 360,
        "wires": [
            [
                "71fe29a8a838e801"
            ]
        ]
    },
    {
        "id": "5a6436e0f351d31c",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "header auth",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 90,
        "y": 240,
        "wires": [
            [
                "8d77be6450ce0f2a"
            ]
        ]
    },
    {
        "id": "53a1975a92fb3b0d",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "header login",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 90,
        "y": 360,
        "wires": [
            [
                "b21258d4f3b19a31"
            ]
        ]
    },
    {
        "id": "2006e13c1c6ae4a2",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "authorized",
        "position": 1,
        "x": 510,
        "y": 240,
        "wires": []
    },
    {
        "id": "478efb8ea02f84dd",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "unauthorized",
        "position": "2",
        "x": 510,
        "y": 280,
        "wires": []
    },
    {
        "id": "71fe29a8a838e801",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "success",
        "position": 1,
        "x": 520,
        "y": 360,
        "wires": []
    },
    {
        "id": "d30b6243d1a61ddc",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "failure",
        "position": "2",
        "x": 530,
        "y": 400,
        "wires": []
    }
]