[
    {
        "id": "b91867b9ff3e5fbe",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "additional endpoints for automated tests",
        "info": "",
        "x": 180,
        "y": 880,
        "wires": []
    },
    {
        "id": "10637208c0234816",
        "type": "http in",
        "z": "015583ed4bc63617",
        "name": "",
        "url": "header-auth-2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 940,
        "wires": [
            [
                "9508538f2d715959"
            ]
        ]
    },
    {
        "id": "6af81cae46a2fe72",
        "type": "http in",
        "z": "015583ed4bc63617",
        "name": "",
        "url": "header-auth-3",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1000,
        "wires": [
            [
                "389dfe05ad6e01a9"
            ]
        ]
    },
    {
        "id": "9508538f2d715959",
        "type": "change",
        "z": "015583ed4bc63617",
        "name": "require impossible role",
        "rules": [
            {
                "t": "set",
                "p": "requiredRole",
                "pt": "msg",
                "to": "god",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 940,
        "wires": [
            [
                "b227364637b38d28"
            ]
        ]
    },
    {
        "id": "389dfe05ad6e01a9",
        "type": "change",
        "z": "015583ed4bc63617",
        "name": "require possible role",
        "rules": [
            {
                "t": "set",
                "p": "requiredRole",
                "pt": "msg",
                "to": "node-red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1000,
        "wires": [
            [
                "b227364637b38d28"
            ]
        ]
    },
    {
        "id": "b227364637b38d28",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "header auth",
        "outputs": 2,
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "edeae0ebe474d074"
            ],
            [
                "f574bf78f95941b3"
            ]
        ]
    },
    {
        "id": "f574bf78f95941b3",
        "type": "change",
        "z": "015583ed4bc63617",
        "name": "inform about success",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "successfully authorized",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1060,
        "wires": [
            [
                "edeae0ebe474d074"
            ]
        ]
    },
    {
        "id": "edeae0ebe474d074",
        "type": "http response",
        "z": "015583ed4bc63617",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 1060,
        "wires": []
    },
    {
        "id": "19493143e842356d",
        "type": "http in",
        "z": "015583ed4bc63617",
        "name": "",
        "url": "header-auth-2",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1120,
        "wires": [
            [
                "077deff3165d8fb5"
            ]
        ]
    },
    {
        "id": "189e3371f6588af3",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "header login",
        "outputs": 2,
        "x": 130,
        "y": 1240,
        "wires": [
            [
                "92c52f43e4fea1e1"
            ],
            [
                "59765b0315b25ebe"
            ]
        ],
        "outputLabels": [
            "success",
            "failure"
        ]
    },
    {
        "id": "59765b0315b25ebe",
        "type": "http response",
        "z": "015583ed4bc63617",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 1240,
        "wires": []
    },
    {
        "id": "f522f48cf355d3c8",
        "type": "http in",
        "z": "015583ed4bc63617",
        "name": "",
        "url": "header-auth-3",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1180,
        "wires": [
            [
                "72d9991603824c2c"
            ]
        ]
    },
    {
        "id": "077deff3165d8fb5",
        "type": "change",
        "z": "015583ed4bc63617",
        "name": "require impossible role",
        "rules": [
            {
                "t": "set",
                "p": "requiredRole",
                "pt": "msg",
                "to": "god",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1120,
        "wires": [
            [
                "189e3371f6588af3"
            ]
        ]
    },
    {
        "id": "72d9991603824c2c",
        "type": "change",
        "z": "015583ed4bc63617",
        "name": "require possible role",
        "rules": [
            {
                "t": "set",
                "p": "requiredRole",
                "pt": "msg",
                "to": "node-red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1180,
        "wires": [
            [
                "189e3371f6588af3"
            ]
        ]
    },
    {
        "id": "92c52f43e4fea1e1",
        "type": "change",
        "z": "015583ed4bc63617",
        "name": "inform about success",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "successfully authorized",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1240,
        "wires": [
            [
                "59765b0315b25ebe"
            ]
        ]
    },
    {
        "id": "bfd53ae1c05d67c7",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "automated tests for Header-based authorization",
        "info": "",
        "x": 860,
        "y": 40,
        "wires": []
    },
    {
        "id": "c7028ceee98b800b",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with missing form",
        "info": "",
        "x": 780,
        "y": 760,
        "wires": []
    },
    {
        "id": "a42cb976177c80f2",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with incomplete form",
        "info": "",
        "x": 790,
        "y": 900,
        "wires": []
    },
    {
        "id": "3e0f576453bf2d60",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with wrong password",
        "info": "",
        "x": 790,
        "y": 1180,
        "wires": []
    },
    {
        "id": "76b0036a1819aa22",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with wrong userid",
        "info": "",
        "x": 780,
        "y": 1040,
        "wires": []
    },
    {
        "id": "3d1aa5789aec9550",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with correct credentials",
        "info": "",
        "x": 800,
        "y": 1320,
        "wires": []
    },
    {
        "id": "ca805f8b59672fbe",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "ac2ff910fb52a73e",
            "d54b173853f8873d",
            "83502a42e790cb05"
        ],
        "uncaught": false,
        "x": 850,
        "y": 840,
        "wires": [
            [
                "84ded9872d73e0a5"
            ]
        ]
    },
    {
        "id": "ac2ff910fb52a73e",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 800,
        "wires": [
            [
                "d54b173853f8873d"
            ]
        ]
    },
    {
        "id": "d54b173853f8873d",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 800,
        "wires": [
            [
                "84ded9872d73e0a5"
            ]
        ]
    },
    {
        "id": "83502a42e790cb05",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL')\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = undefined // no form at all\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 800,
        "wires": [
            [
                "ac2ff910fb52a73e"
            ]
        ]
    },
    {
        "id": "1bc72001c8b4c694",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "72c727e91da7485f",
            "223bc49d80b72b9c",
            "17cead6ff118b667"
        ],
        "uncaught": false,
        "x": 850,
        "y": 980,
        "wires": [
            [
                "842747f1ec96f43d"
            ]
        ]
    },
    {
        "id": "72c727e91da7485f",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 940,
        "wires": [
            [
                "223bc49d80b72b9c"
            ]
        ]
    },
    {
        "id": "223bc49d80b72b9c",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 940,
        "wires": [
            [
                "842747f1ec96f43d"
            ]
        ]
    },
    {
        "id": "17cead6ff118b667",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL')\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'node-red'\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 940,
        "wires": [
            [
                "72c727e91da7485f"
            ]
        ]
    },
    {
        "id": "880791526f253a6e",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "ea26f15fb480a59e",
            "593bcf87eb0f737e",
            "470c07ee7dbcfe15"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1120,
        "wires": [
            [
                "c68aedf0d340f361"
            ]
        ]
    },
    {
        "id": "ea26f15fb480a59e",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1080,
        "wires": [
            [
                "593bcf87eb0f737e"
            ]
        ]
    },
    {
        "id": "593bcf87eb0f737e",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1080,
        "wires": [
            [
                "c68aedf0d340f361"
            ]
        ]
    },
    {
        "id": "470c07ee7dbcfe15",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL')\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'invalid-user',\n  Password:'t0pS3cr3t!'\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1080,
        "wires": [
            [
                "ea26f15fb480a59e"
            ]
        ]
    },
    {
        "id": "9c5dd5a81a34dd48",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "2c770843d861b016",
            "d60a315bbbe4a044",
            "7f8f856dff84b258"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1260,
        "wires": [
            [
                "dee4a6d9c2cdc7a7"
            ]
        ]
    },
    {
        "id": "2c770843d861b016",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1220,
        "wires": [
            [
                "d60a315bbbe4a044"
            ]
        ]
    },
    {
        "id": "d60a315bbbe4a044",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1220,
        "wires": [
            [
                "dee4a6d9c2cdc7a7"
            ]
        ]
    },
    {
        "id": "7f8f856dff84b258",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL')\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'node-red',\n  Password:'invalid-password'\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1220,
        "wires": [
            [
                "2c770843d861b016"
            ]
        ]
    },
    {
        "id": "84e7c3f49d6e27b6",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "e2991a5b150c3bcb",
            "d3497b4944027e76",
            "d3166c03b3e5ebc8"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1400,
        "wires": [
            [
                "7ab388f8022b5ecb"
            ]
        ]
    },
    {
        "id": "e2991a5b150c3bcb",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1360,
        "wires": [
            [
                "d3497b4944027e76"
            ]
        ]
    },
    {
        "id": "d3497b4944027e76",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.headers['authorization']).to.exist\n\nlet Header = msg.headers['authorization']\nexpect(Header).to.match(/^Bearer\\s+node-red:\\d+:[0-9a-f]+$/)\n\nlet [UserId,Expiration,Digest] = Header.replace(/^Bearer\\s+/,'').split(':')\nexpect(UserId).to.equal('node-red')\nexpect(parseInt(Expiration,10)).to.be.at.least(msg.now)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1360,
        "wires": [
            [
                "7ab388f8022b5ecb"
            ]
        ]
    },
    {
        "id": "d3166c03b3e5ebc8",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL')\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1360,
        "wires": [
            [
                "e2991a5b150c3bcb"
            ]
        ]
    },
    {
        "id": "74a9f22f4160c83d",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#1",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 800,
        "wires": [
            [
                "83502a42e790cb05"
            ]
        ]
    },
    {
        "id": "7523b527d784e5ba",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#2",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 940,
        "wires": [
            [
                "17cead6ff118b667"
            ]
        ]
    },
    {
        "id": "b6d10a9996c5863f",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#3",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1080,
        "wires": [
            [
                "470c07ee7dbcfe15"
            ]
        ]
    },
    {
        "id": "aeb42c73a06e0e1b",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#4",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1220,
        "wires": [
            [
                "7f8f856dff84b258"
            ]
        ]
    },
    {
        "id": "f49bc769137ae19e",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#5",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1360,
        "wires": [
            [
                "d3166c03b3e5ebc8"
            ]
        ]
    },
    {
        "id": "84ded9872d73e0a5",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 840,
        "wires": []
    },
    {
        "id": "842747f1ec96f43d",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 980,
        "wires": []
    },
    {
        "id": "c68aedf0d340f361",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1120,
        "wires": []
    },
    {
        "id": "dee4a6d9c2cdc7a7",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1260,
        "wires": []
    },
    {
        "id": "7ab388f8022b5ecb",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1400,
        "wires": []
    },
    {
        "id": "ecd31d87709ba650",
        "type": "link in",
        "z": "015583ed4bc63617",
        "name": "2nd batch of automated tests",
        "links": [
            "46582fde975466dd"
        ],
        "x": 1535,
        "y": 100,
        "wires": [
            [
                "b846ec8ea3cfb424"
            ]
        ]
    },
    {
        "id": "01953f8bf6c5e512",
        "type": "link in",
        "z": "015583ed4bc63617",
        "name": "finish automated tests",
        "links": [
            "ef0a8e5c0fd3c244"
        ],
        "x": 1055,
        "y": 160,
        "wires": [
            [
                "02db513476c2fb0e"
            ]
        ]
    },
    {
        "id": "46582fde975466dd",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "ecd31d87709ba650"
        ],
        "x": 935,
        "y": 160,
        "wires": []
    },
    {
        "id": "ef0a8e5c0fd3c244",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "01953f8bf6c5e512"
        ],
        "x": 1635,
        "y": 240,
        "wires": []
    },
    {
        "id": "a26cef0e2169790d",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "run Tests",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 760,
        "y": 100,
        "wires": [
            [
                "b31d6da60c799732"
            ]
        ]
    },
    {
        "id": "66163482b30c5914",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "reset totals",
        "func": "flow.set('Totals',0)\n\nmsg.TestMode = '-'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 100,
        "wires": [
            [
                "02db513476c2fb0e",
                "8d7d328683d95a56"
            ]
        ]
    },
    {
        "id": "02db513476c2fb0e",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "Status",
        "func": "switch (true) {\n  case (msg.TestMode === '-'):\n    node.status({})\n    break\n  case (flow.get('Totals') === 0):\n    node.status({fill:'green',shape:'dot',text:'ok'})\n    break\n  default:\n    node.status({fill:'red',shape:'dot',text:'failed'})\n}\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 140,
        "wires": []
    },
    {
        "id": "8d7d328683d95a56",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "dispatch",
        "func": "if (context.get('pendingList') == null) { // first invocation\n  msg.TestMode = 'multiple-tests'\n\n  let MsgList = [null], pendingList = []\n  for (let i = 1, l = node.outputCount; i < l; i++) {\n    MsgList.push(null)\n    pendingList.push(i)\n  }\n  context.set('MsgList',MsgList)\n  context.set('pendingList',pendingList)\n}\n\nlet pendingList = context.get('pendingList')\nif (pendingList.length === 0) { // all tests completed\n  context.set('pendingList',null)\n  return [msg]\n} else { // ongoing tests\n  let msg = {} // create new, empty \"msg\" object\n\n  let chosenIndex  = Math.floor(Math.random()*pendingList.length)\n  let chosenOutput = pendingList.splice(chosenIndex,1)[0]\n\n  context.set('pendingList',pendingList)\n\n  let MsgList = context.get('MsgList').slice()\n    MsgList[chosenOutput] = msg\n  return MsgList\n}\n",
        "outputs": 8,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 200,
        "wires": [
            [
                "46582fde975466dd"
            ],
            [
                "d8b846710423539a"
            ],
            [
                "f8682820958b6d73"
            ],
            [
                "4bc0dc2d7fdcd08a"
            ],
            [
                "0b181b198b30956f"
            ],
            [
                "fb4458338bf68eca"
            ],
            [
                "1e0f5b961aaa589c"
            ],
            [
                "3e5d75661cb21de9"
            ]
        ]
    },
    {
        "id": "d16bdbc9880c750b",
        "type": "link in",
        "z": "015583ed4bc63617",
        "name": "Header-based Authorization I",
        "links": [
            "88eec75a427c5751",
            "a3c8afbe6fa19793",
            "c7962629f558d15e",
            "1c4b850506c70da7",
            "6a4ec64367a31f72",
            "9592742915370b62",
            "ddf8d1243b96b42b",
            "c7ab3ca52dd0fe82",
            "e91e98be5d66f69d"
        ],
        "x": 695,
        "y": 200,
        "wires": [
            [
                "8d7d328683d95a56"
            ]
        ]
    },
    {
        "id": "b31d6da60c799732",
        "type": "change",
        "z": "015583ed4bc63617",
        "name": "configure",
        "rules": [
            {
                "t": "set",
                "p": "HeaderAuthURL",
                "pt": "flow",
                "to": "http://127.0.0.1:1880/header-auth",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 100,
        "wires": [
            [
                "66163482b30c5914"
            ]
        ]
    },
    {
        "id": "8941838ec13c47e8",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 300,
        "wires": [
            [
                "9592742915370b62"
            ]
        ]
    },
    {
        "id": "f5c1ddfb38c74193",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 300,
        "wires": [
            [
                "d8b846710423539a"
            ]
        ]
    },
    {
        "id": "9592742915370b62",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "d16bdbc9880c750b",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 300,
        "wires": []
    },
    {
        "id": "7426e259223b75fc",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 320,
        "wires": [
            [
                "8941838ec13c47e8"
            ]
        ]
    },
    {
        "id": "ad8ae53e66024de6",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 360,
        "wires": [
            [
                "1c4b850506c70da7"
            ]
        ]
    },
    {
        "id": "f3840664eb460aee",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 360,
        "wires": [
            [
                "f8682820958b6d73"
            ]
        ]
    },
    {
        "id": "1c4b850506c70da7",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "d16bdbc9880c750b",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 360,
        "wires": []
    },
    {
        "id": "e1cb318a0eb428ea",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 380,
        "wires": [
            [
                "ad8ae53e66024de6"
            ]
        ]
    },
    {
        "id": "a279e7be37dc758a",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 420,
        "wires": [
            [
                "a3c8afbe6fa19793"
            ]
        ]
    },
    {
        "id": "7dfb640faab8369b",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 420,
        "wires": [
            [
                "4bc0dc2d7fdcd08a"
            ]
        ]
    },
    {
        "id": "a3c8afbe6fa19793",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "d16bdbc9880c750b",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 420,
        "wires": []
    },
    {
        "id": "24b22093c8b3da92",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 440,
        "wires": [
            [
                "a279e7be37dc758a"
            ]
        ]
    },
    {
        "id": "d7d36d921cfd77cf",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 480,
        "wires": [
            [
                "6a4ec64367a31f72"
            ]
        ]
    },
    {
        "id": "383d5a94a0894e5b",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 480,
        "wires": [
            [
                "0b181b198b30956f"
            ]
        ]
    },
    {
        "id": "6a4ec64367a31f72",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "d16bdbc9880c750b",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 480,
        "wires": []
    },
    {
        "id": "b75302708c6ea9d8",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "d7d36d921cfd77cf"
            ]
        ]
    },
    {
        "id": "531991edc6900b31",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 540,
        "wires": [
            [
                "c7962629f558d15e"
            ]
        ]
    },
    {
        "id": "a9fde265b0251bbc",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 540,
        "wires": [
            [
                "fb4458338bf68eca"
            ]
        ]
    },
    {
        "id": "c7962629f558d15e",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "d16bdbc9880c750b",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 540,
        "wires": []
    },
    {
        "id": "630e77a5a1ab3657",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 560,
        "wires": [
            [
                "531991edc6900b31"
            ]
        ]
    },
    {
        "id": "d8b846710423539a",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#1",
        "outputs": 1,
        "x": 870,
        "y": 300,
        "wires": [
            [
                "8941838ec13c47e8"
            ]
        ]
    },
    {
        "id": "f8682820958b6d73",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#2",
        "outputs": 1,
        "x": 870,
        "y": 360,
        "wires": [
            [
                "ad8ae53e66024de6"
            ]
        ]
    },
    {
        "id": "4bc0dc2d7fdcd08a",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#3",
        "outputs": 1,
        "x": 870,
        "y": 420,
        "wires": [
            [
                "a279e7be37dc758a"
            ]
        ]
    },
    {
        "id": "0b181b198b30956f",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#4",
        "outputs": 1,
        "x": 870,
        "y": 480,
        "wires": [
            [
                "d7d36d921cfd77cf"
            ]
        ]
    },
    {
        "id": "fb4458338bf68eca",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#5",
        "outputs": 1,
        "x": 870,
        "y": 540,
        "wires": [
            [
                "531991edc6900b31"
            ]
        ]
    },
    {
        "id": "2537611c9a0568f4",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 600,
        "wires": [
            [
                "ddf8d1243b96b42b"
            ]
        ]
    },
    {
        "id": "b2d09c58a4d08128",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 600,
        "wires": [
            [
                "1e0f5b961aaa589c"
            ]
        ]
    },
    {
        "id": "ddf8d1243b96b42b",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "d16bdbc9880c750b",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 600,
        "wires": []
    },
    {
        "id": "5ac2de08648773fa",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 620,
        "wires": [
            [
                "2537611c9a0568f4"
            ]
        ]
    },
    {
        "id": "676545ca5c66a4e9",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 660,
        "wires": [
            [
                "c7ab3ca52dd0fe82"
            ]
        ]
    },
    {
        "id": "eda52622a0a32dff",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 660,
        "wires": [
            [
                "3e5d75661cb21de9"
            ]
        ]
    },
    {
        "id": "c7ab3ca52dd0fe82",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "d16bdbc9880c750b",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 660,
        "wires": []
    },
    {
        "id": "186bf0d309183125",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "676545ca5c66a4e9"
            ]
        ]
    },
    {
        "id": "1e0f5b961aaa589c",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#6",
        "outputs": 1,
        "x": 870,
        "y": 600,
        "wires": [
            [
                "2537611c9a0568f4"
            ]
        ]
    },
    {
        "id": "3e5d75661cb21de9",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#7",
        "outputs": 1,
        "x": 870,
        "y": 660,
        "wires": [
            [
                "676545ca5c66a4e9"
            ]
        ]
    },
    {
        "id": "74e5d506f92a7eda",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with wrong required role",
        "info": "",
        "x": 800,
        "y": 1460,
        "wires": []
    },
    {
        "id": "57b0e80a9363d4dd",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with correct required role",
        "info": "",
        "x": 800,
        "y": 1600,
        "wires": []
    },
    {
        "id": "136fbb6c2791a53c",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "d44835ea86099e1d",
            "815174cab30924fb",
            "ce1f16f5d47d8da0"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1540,
        "wires": [
            [
                "ac4637aa453b3bd1"
            ]
        ]
    },
    {
        "id": "d44835ea86099e1d",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1500,
        "wires": [
            [
                "815174cab30924fb"
            ]
        ]
    },
    {
        "id": "815174cab30924fb",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1500,
        "wires": [
            [
                "ac4637aa453b3bd1"
            ]
        ]
    },
    {
        "id": "ce1f16f5d47d8da0",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL') + '-2'\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1500,
        "wires": [
            [
                "d44835ea86099e1d"
            ]
        ]
    },
    {
        "id": "5577c747713afd0b",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "48de2d71aa4348c3",
            "0f519f691b61b2c3",
            "be7f2c1ade5f47be"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1680,
        "wires": [
            [
                "d356a4882829f103"
            ]
        ]
    },
    {
        "id": "48de2d71aa4348c3",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1640,
        "wires": [
            [
                "0f519f691b61b2c3"
            ]
        ]
    },
    {
        "id": "0f519f691b61b2c3",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.headers['authorization']).to.exist\n\nlet Header = msg.headers['authorization']\nexpect(Header).to.match(/^Bearer\\s+node-red:\\d+:[0-9a-f]+$/)\n\nlet [UserId,Expiration,Digest] = Header.replace(/^Bearer\\s+/,'').split(':')\nexpect(UserId).to.equal('node-red')\nexpect(parseInt(Expiration,10)).to.be.at.least(msg.now)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1640,
        "wires": [
            [
                "d356a4882829f103"
            ]
        ]
    },
    {
        "id": "be7f2c1ade5f47be",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL') + '-3'\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1640,
        "wires": [
            [
                "48de2d71aa4348c3"
            ]
        ]
    },
    {
        "id": "b7ae1a25daf1eab6",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#6",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1500,
        "wires": [
            [
                "ce1f16f5d47d8da0"
            ]
        ]
    },
    {
        "id": "8457be19a88c3ca3",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#7",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1640,
        "wires": [
            [
                "be7f2c1ade5f47be"
            ]
        ]
    },
    {
        "id": "ac4637aa453b3bd1",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1540,
        "wires": []
    },
    {
        "id": "d356a4882829f103",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1680,
        "wires": []
    },
    {
        "id": "f0067cd7a06bca2a",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "dispatch",
        "func": "if (context.get('pendingList') == null) { // first invocation\n  msg.TestMode = 'multiple-tests'\n\n  let MsgList = [null], pendingList = []\n  for (let i = 1, l = node.outputCount; i < l; i++) {\n    MsgList.push(null)\n    pendingList.push(i)\n  }\n  context.set('MsgList',MsgList)\n  context.set('pendingList',pendingList)\n}\n\nlet pendingList = context.get('pendingList')\nif (pendingList.length === 0) { // all tests completed\n  context.set('pendingList',null)\n  return [msg]\n} else { // ongoing tests\n  let msg = {} // create new, empty \"msg\" object\n\n  let chosenIndex  = Math.floor(Math.random()*pendingList.length)\n  let chosenOutput = pendingList.splice(chosenIndex,1)[0]\n\n  context.set('pendingList',pendingList)\n\n  let MsgList = context.get('MsgList').slice()\n    MsgList[chosenOutput] = msg\n  return MsgList\n}\n",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 240,
        "wires": [
            [
                "ef0a8e5c0fd3c244"
            ],
            [
                "d7433323f3b36ed7"
            ],
            [
                "99030bd566663ca6"
            ],
            [
                "7d2b5d13e5c23d7a"
            ],
            [
                "6fe38edddf676a96"
            ],
            [
                "5094c8c6d39e5f97"
            ],
            [
                "a5dd15926c47c2ae"
            ],
            [
                "3c6a58e2a83d04fb"
            ],
            [
                "76842119a517ae6d"
            ]
        ]
    },
    {
        "id": "b846ec8ea3cfb424",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "login properly",
        "func": "msg.url     = flow.get('HeaderAuthURL')\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 140,
        "wires": [
            [
                "8759a7f41f7dc0bc"
            ]
        ]
    },
    {
        "id": "a91a83828238a5d8",
        "type": "link in",
        "z": "015583ed4bc63617",
        "name": "Header-based Authorization II",
        "links": [
            "5c70c49ca293db7c",
            "9dcfdd67d1bd2c9d",
            "aa0929e5576ed0c3",
            "a080e96c8ab54a37",
            "a19d2c7bdb8c6549",
            "6b72df89a707e1c9",
            "420574c4832951e1",
            "1170b0b183f448a4"
        ],
        "x": 1355,
        "y": 240,
        "wires": [
            [
                "f0067cd7a06bca2a"
            ]
        ]
    },
    {
        "id": "8b76fad98a345a71",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 340,
        "wires": [
            [
                "5c70c49ca293db7c"
            ]
        ]
    },
    {
        "id": "d3b717f740c57a39",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 340,
        "wires": [
            [
                "d7433323f3b36ed7"
            ]
        ]
    },
    {
        "id": "5c70c49ca293db7c",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "a91a83828238a5d8"
        ],
        "x": 1875,
        "y": 340,
        "wires": []
    },
    {
        "id": "f40c77dfb87457f1",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 360,
        "wires": [
            [
                "8b76fad98a345a71"
            ]
        ]
    },
    {
        "id": "98b84012531a9cc4",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 400,
        "wires": [
            [
                "a080e96c8ab54a37"
            ]
        ]
    },
    {
        "id": "5520e2886ab5f42b",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 400,
        "wires": [
            [
                "99030bd566663ca6"
            ]
        ]
    },
    {
        "id": "a080e96c8ab54a37",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "a91a83828238a5d8"
        ],
        "x": 1875,
        "y": 400,
        "wires": []
    },
    {
        "id": "b9c3d8bcecb0000e",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 420,
        "wires": [
            [
                "98b84012531a9cc4"
            ]
        ]
    },
    {
        "id": "7d5bc15c60a06b68",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 460,
        "wires": [
            [
                "9dcfdd67d1bd2c9d"
            ]
        ]
    },
    {
        "id": "a470f5ae6e7bb49c",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 460,
        "wires": [
            [
                "7d2b5d13e5c23d7a"
            ]
        ]
    },
    {
        "id": "9dcfdd67d1bd2c9d",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "a91a83828238a5d8"
        ],
        "x": 1875,
        "y": 460,
        "wires": []
    },
    {
        "id": "2192785d6b60c28a",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 480,
        "wires": [
            [
                "7d5bc15c60a06b68"
            ]
        ]
    },
    {
        "id": "782f594dbbc3c5fb",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 520,
        "wires": [
            [
                "a19d2c7bdb8c6549"
            ]
        ]
    },
    {
        "id": "bf06f8c8ee1057a0",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 520,
        "wires": [
            [
                "6fe38edddf676a96"
            ]
        ]
    },
    {
        "id": "a19d2c7bdb8c6549",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "a91a83828238a5d8"
        ],
        "x": 1875,
        "y": 520,
        "wires": []
    },
    {
        "id": "a4679794e393498a",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 540,
        "wires": [
            [
                "782f594dbbc3c5fb"
            ]
        ]
    },
    {
        "id": "3aa59bd7b58225c5",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 580,
        "wires": [
            [
                "6b72df89a707e1c9"
            ]
        ]
    },
    {
        "id": "af772bb6d9de4be7",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 580,
        "wires": [
            [
                "5094c8c6d39e5f97"
            ]
        ]
    },
    {
        "id": "6b72df89a707e1c9",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "a91a83828238a5d8"
        ],
        "x": 1875,
        "y": 580,
        "wires": []
    },
    {
        "id": "aaa78ec2b68e9384",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 600,
        "wires": [
            [
                "3aa59bd7b58225c5"
            ]
        ]
    },
    {
        "id": "7b33d2e92583f333",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 640,
        "wires": [
            [
                "aa0929e5576ed0c3"
            ]
        ]
    },
    {
        "id": "b5bb01470c3e6596",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 640,
        "wires": [
            [
                "a5dd15926c47c2ae"
            ]
        ]
    },
    {
        "id": "aa0929e5576ed0c3",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "a91a83828238a5d8"
        ],
        "x": 1875,
        "y": 640,
        "wires": []
    },
    {
        "id": "934e20d2f221b853",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 660,
        "wires": [
            [
                "7b33d2e92583f333"
            ]
        ]
    },
    {
        "id": "8759a7f41f7dc0bc",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "http",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1590,
        "y": 140,
        "wires": [
            [
                "8be6200880036b63"
            ]
        ]
    },
    {
        "id": "8be6200880036b63",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.headers['authorization']).to.exist\n\nlet Header = msg.headers['authorization']\nexpect(Header).to.match(/^Bearer\\s+node-red:\\d+:[0-9a-f]+$/)\n\nlet [UserId,Expiration,Digest] = Header.replace(/^Bearer\\s+/,'').split(':')\nexpect(UserId).to.equal('node-red')\nexpect(parseInt(Expiration,10)).to.be.at.least(msg.now)\n\nflow.set('HeaderAuthHeader',Header)\n\nif (msg.TestMode !== 'single-test') {\n  return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1710,
        "y": 140,
        "wires": [
            [
                "f0067cd7a06bca2a"
            ]
        ]
    },
    {
        "id": "f4ea275b5235dd70",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "8759a7f41f7dc0bc",
            "8be6200880036b63",
            "b846ec8ea3cfb424"
        ],
        "uncaught": false,
        "x": 1670,
        "y": 180,
        "wires": [
            [
                "7a6ebde16ee28c8a"
            ]
        ]
    },
    {
        "id": "7a6ebde16ee28c8a",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({})\n  } else {\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 180,
        "wires": [
            [
                "e91e98be5d66f69d"
            ]
        ]
    },
    {
        "id": "e91e98be5d66f69d",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "2127d920bb2faa12",
            "a2d05779d9af1600",
            "d16bdbc9880c750b"
        ],
        "x": 1875,
        "y": 180,
        "wires": []
    },
    {
        "id": "76c007f412bc0542",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 100,
        "wires": [
            [
                "b846ec8ea3cfb424"
            ]
        ]
    },
    {
        "id": "d7433323f3b36ed7",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#8",
        "outputs": 1,
        "x": 1530,
        "y": 340,
        "wires": [
            [
                "8b76fad98a345a71"
            ]
        ]
    },
    {
        "id": "99030bd566663ca6",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#9",
        "outputs": 1,
        "x": 1530,
        "y": 400,
        "wires": [
            [
                "98b84012531a9cc4"
            ]
        ]
    },
    {
        "id": "7d2b5d13e5c23d7a",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#10",
        "outputs": 1,
        "x": 1530,
        "y": 460,
        "wires": [
            [
                "7d5bc15c60a06b68"
            ]
        ]
    },
    {
        "id": "6fe38edddf676a96",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#11",
        "outputs": 1,
        "x": 1530,
        "y": 520,
        "wires": [
            [
                "782f594dbbc3c5fb"
            ]
        ]
    },
    {
        "id": "5094c8c6d39e5f97",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#12",
        "outputs": 1,
        "x": 1530,
        "y": 580,
        "wires": [
            [
                "3aa59bd7b58225c5"
            ]
        ]
    },
    {
        "id": "a5dd15926c47c2ae",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#13",
        "outputs": 1,
        "x": 1530,
        "y": 640,
        "wires": [
            [
                "7b33d2e92583f333"
            ]
        ]
    },
    {
        "id": "cdabe0539399ad79",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 700,
        "wires": [
            [
                "420574c4832951e1"
            ]
        ]
    },
    {
        "id": "2337c8a9e8a07f6c",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 700,
        "wires": [
            [
                "3c6a58e2a83d04fb"
            ]
        ]
    },
    {
        "id": "420574c4832951e1",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "a91a83828238a5d8"
        ],
        "x": 1875,
        "y": 700,
        "wires": []
    },
    {
        "id": "687681b8e2244c5a",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 720,
        "wires": [
            [
                "cdabe0539399ad79"
            ]
        ]
    },
    {
        "id": "1387fe86d1d7cdd0",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 760,
        "wires": [
            [
                "1170b0b183f448a4"
            ]
        ]
    },
    {
        "id": "49afd98fd5b40697",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 760,
        "wires": [
            [
                "76842119a517ae6d"
            ]
        ]
    },
    {
        "id": "1170b0b183f448a4",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "a91a83828238a5d8"
        ],
        "x": 1875,
        "y": 760,
        "wires": []
    },
    {
        "id": "9c0577cd5eb5e761",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 780,
        "wires": [
            [
                "1387fe86d1d7cdd0"
            ]
        ]
    },
    {
        "id": "3c6a58e2a83d04fb",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#14",
        "outputs": 1,
        "x": 1530,
        "y": 700,
        "wires": [
            [
                "cdabe0539399ad79"
            ]
        ]
    },
    {
        "id": "76842119a517ae6d",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#15",
        "outputs": 1,
        "x": 1530,
        "y": 760,
        "wires": [
            [
                "1387fe86d1d7cdd0"
            ]
        ]
    },
    {
        "id": "e3e06d98e5c47c0b",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get without authorization header",
        "info": "",
        "x": 1470,
        "y": 860,
        "wires": []
    },
    {
        "id": "d312835b9dd71344",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with broken authorization header",
        "info": "",
        "x": 1480,
        "y": 1000,
        "wires": []
    },
    {
        "id": "3a48142b7d7f7ad5",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with modified userid",
        "info": "",
        "x": 1440,
        "y": 1140,
        "wires": []
    },
    {
        "id": "9169238fda50565a",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with modified expiration",
        "info": "",
        "x": 1460,
        "y": 1280,
        "wires": []
    },
    {
        "id": "150e8af163c1eee2",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with modified digest",
        "info": "",
        "x": 1440,
        "y": 1420,
        "wires": []
    },
    {
        "id": "50e45f3a69c65825",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with correct authorization header",
        "info": "",
        "x": 1480,
        "y": 1560,
        "wires": []
    },
    {
        "id": "c9032e9dc35a9416",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "063cbfeb57f05362",
            "ec32ec849c897d79",
            "8e238b1bcce20e5d"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 940,
        "wires": [
            [
                "25afa6d796216c19"
            ]
        ]
    },
    {
        "id": "063cbfeb57f05362",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 900,
        "wires": [
            [
                "ec32ec849c897d79"
            ]
        ]
    },
    {
        "id": "ec32ec849c897d79",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 900,
        "wires": [
            [
                "25afa6d796216c19"
            ]
        ]
    },
    {
        "id": "8e238b1bcce20e5d",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL')\n\nmsg.headers = msg.headers || {}\ndelete msg.headers['authorization']\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 900,
        "wires": [
            [
                "063cbfeb57f05362"
            ]
        ]
    },
    {
        "id": "28a1ef33b8e64b94",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "ab927585c26643e9",
            "b5ed77e69698c44c",
            "b0a0538ecf9826ef"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1080,
        "wires": [
            [
                "78098f5b6efad01b"
            ]
        ]
    },
    {
        "id": "ab927585c26643e9",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1040,
        "wires": [
            [
                "b5ed77e69698c44c"
            ]
        ]
    },
    {
        "id": "b5ed77e69698c44c",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1040,
        "wires": [
            [
                "78098f5b6efad01b"
            ]
        ]
    },
    {
        "id": "b0a0538ecf9826ef",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL')\nmsg.headers = { authorization:'Bearer : : : : : : : broken-header' }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1040,
        "wires": [
            [
                "ab927585c26643e9"
            ]
        ]
    },
    {
        "id": "1fba72c270ceade4",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "d8f92f3953e06752",
            "0dd049d9c4626ff8",
            "5fa2eb1565d53ef3"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1220,
        "wires": [
            [
                "a80a755e0dd316c8"
            ]
        ]
    },
    {
        "id": "d8f92f3953e06752",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1180,
        "wires": [
            [
                "0dd049d9c4626ff8"
            ]
        ]
    },
    {
        "id": "0dd049d9c4626ff8",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1180,
        "wires": [
            [
                "a80a755e0dd316c8"
            ]
        ]
    },
    {
        "id": "5fa2eb1565d53ef3",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL')\n\nlet Header = flow.get('HeaderAuthHeader')\nlet [UserId,Expiration,Digest] = Header.replace(/^Bearer\\s+/,'').split(':')\n\nUserId = 'node-green'\n\nmsg.headers = { authorization:'Bearer ' + UserId + ':' + Expiration + ':' + Digest }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1180,
        "wires": [
            [
                "d8f92f3953e06752"
            ]
        ]
    },
    {
        "id": "2454c26f900f848d",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "983e2b3f721d17fc",
            "f0369017aab9b49f",
            "c0aa33ced2c6d7ca"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1360,
        "wires": [
            [
                "c4801de3b5557a10"
            ]
        ]
    },
    {
        "id": "983e2b3f721d17fc",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1320,
        "wires": [
            [
                "f0369017aab9b49f"
            ]
        ]
    },
    {
        "id": "f0369017aab9b49f",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1320,
        "wires": [
            [
                "c4801de3b5557a10"
            ]
        ]
    },
    {
        "id": "c0aa33ced2c6d7ca",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL')\n\nlet Header = flow.get('HeaderAuthHeader')\nlet [UserId,Expiration,Digest] = Header.replace(/^Bearer\\s+/,'').split(':')\n\nExpiration = parseInt(Expiration,10) + 365*24*60*60*1000\n\nmsg.headers = { authorization:'Bearer ' + UserId + ':' + Expiration + ':' + Digest }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1320,
        "wires": [
            [
                "983e2b3f721d17fc"
            ]
        ]
    },
    {
        "id": "39d3413be69ac667",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "fcf37b7533bb6dc1",
            "e80e6f988d7e533a",
            "f126a5eef5181437"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1500,
        "wires": [
            [
                "7a3d4a9c9f9e8f56"
            ]
        ]
    },
    {
        "id": "fcf37b7533bb6dc1",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1460,
        "wires": [
            [
                "e80e6f988d7e533a"
            ]
        ]
    },
    {
        "id": "e80e6f988d7e533a",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1460,
        "wires": [
            [
                "7a3d4a9c9f9e8f56"
            ]
        ]
    },
    {
        "id": "f126a5eef5181437",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL')\n\nlet Header = flow.get('HeaderAuthHeader')\nlet [UserId,Expiration,Digest] = Header.replace(/^Bearer\\s+/,'').split(':')\n\nDigest = 'c3da5c194d3104f6ff5986cd79cc3dada0bc14447330c7da0eb8299091188d7b'\n\nmsg.headers = { authorization:'Bearer ' + UserId + ':' + Expiration + ':' + Digest }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1460,
        "wires": [
            [
                "fcf37b7533bb6dc1"
            ]
        ]
    },
    {
        "id": "af8b76fb25fd8971",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "985c88eee7ea6c19",
            "203ffe90c5ca313f",
            "b6e0bc06b35b9cb6"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1640,
        "wires": [
            [
                "897f87ce2a075e92"
            ]
        ]
    },
    {
        "id": "985c88eee7ea6c19",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1600,
        "wires": [
            [
                "203ffe90c5ca313f"
            ]
        ]
    },
    {
        "id": "203ffe90c5ca313f",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.headers['authorization']).to.exist\n\nlet newHeader = msg.headers['authorization']\nexpect(newHeader).to.match(/^Bearer\\s+node-red:\\d+:[0-9a-f]+$/)\n\nlet [newUserId,newExpiration,newDigest] = newHeader.replace(/^Bearer\\s+/,'').split(':')\n\nlet oldHeader = flow.get('HeaderAuthHeader')\nlet [oldUserId,oldExpiration,oldDigest] = oldHeader.replace(/^Bearer\\s+/,'').split(':')\n\nexpect(newUserId).to.equal(oldUserId)\nexpect(parseInt(newExpiration,10)).to.be.at.least(parseInt(oldExpiration,10))\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1600,
        "wires": [
            [
                "897f87ce2a075e92"
            ]
        ]
    },
    {
        "id": "b6e0bc06b35b9cb6",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL')\n\nlet Header = flow.get('HeaderAuthHeader')\n\nmsg.headers = { authorization:Header }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1600,
        "wires": [
            [
                "985c88eee7ea6c19"
            ]
        ]
    },
    {
        "id": "c9c7f7b52d5d1ed9",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#8",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 900,
        "wires": [
            [
                "8e238b1bcce20e5d"
            ]
        ]
    },
    {
        "id": "5a0f96640c28278b",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#9",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1040,
        "wires": [
            [
                "b0a0538ecf9826ef"
            ]
        ]
    },
    {
        "id": "fd0ac5289a638e00",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#10",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1180,
        "wires": [
            [
                "5fa2eb1565d53ef3"
            ]
        ]
    },
    {
        "id": "b84a1c6e156fdcc4",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#11",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1320,
        "wires": [
            [
                "c0aa33ced2c6d7ca"
            ]
        ]
    },
    {
        "id": "5ffe58d93bed1291",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#12",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1460,
        "wires": [
            [
                "f126a5eef5181437"
            ]
        ]
    },
    {
        "id": "4e948ba78e8fa150",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#13",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1600,
        "wires": [
            [
                "b6e0bc06b35b9cb6"
            ]
        ]
    },
    {
        "id": "897f87ce2a075e92",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1640,
        "wires": []
    },
    {
        "id": "7a3d4a9c9f9e8f56",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1500,
        "wires": []
    },
    {
        "id": "c4801de3b5557a10",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1360,
        "wires": []
    },
    {
        "id": "a80a755e0dd316c8",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1220,
        "wires": []
    },
    {
        "id": "78098f5b6efad01b",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1080,
        "wires": []
    },
    {
        "id": "25afa6d796216c19",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 940,
        "wires": []
    },
    {
        "id": "f16306f2a437179b",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with wrong required role",
        "info": "",
        "x": 1460,
        "y": 1700,
        "wires": []
    },
    {
        "id": "311365ea259d9163",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with correct required role",
        "info": "",
        "x": 1460,
        "y": 1840,
        "wires": []
    },
    {
        "id": "d86b30422762a942",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "7a10bb1e181afdc1",
            "d8309cd3fca98eb8",
            "e94bdb800cfd0b3b"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1780,
        "wires": [
            [
                "9ca8b62502254ec5"
            ]
        ]
    },
    {
        "id": "7a10bb1e181afdc1",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1740,
        "wires": [
            [
                "d8309cd3fca98eb8"
            ]
        ]
    },
    {
        "id": "d8309cd3fca98eb8",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1740,
        "wires": [
            [
                "9ca8b62502254ec5"
            ]
        ]
    },
    {
        "id": "e94bdb800cfd0b3b",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL') + '-2'\n\nlet Header = flow.get('HeaderAuthHeader')\n\nmsg.headers = { authorization:Header }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1740,
        "wires": [
            [
                "7a10bb1e181afdc1"
            ]
        ]
    },
    {
        "id": "f3069de4120ffb2a",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "21cc7cf4d71c095f",
            "5b77ae3cd58e6cd6",
            "cc523ae166b81159"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1920,
        "wires": [
            [
                "ef8919967c07b987"
            ]
        ]
    },
    {
        "id": "21cc7cf4d71c095f",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1880,
        "wires": [
            [
                "5b77ae3cd58e6cd6"
            ]
        ]
    },
    {
        "id": "5b77ae3cd58e6cd6",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.headers['authorization']).to.exist\n\nlet newHeader = msg.headers['authorization']\nexpect(newHeader).to.match(/^Bearer\\s+node-red:\\d+:[0-9a-f]+$/)\n\nlet [newUserId,newExpiration,newDigest] = newHeader.replace(/^Bearer\\s+/,'').split(':')\n\nlet oldHeader = flow.get('HeaderAuthHeader')\nlet [oldUserId,oldExpiration,oldDigest] = oldHeader.replace(/^Bearer\\s+/,'').split(':')\n\nexpect(newUserId).to.equal(oldUserId)\nexpect(parseInt(newExpiration,10)).to.be.at.least(parseInt(oldExpiration,10))\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1880,
        "wires": [
            [
                "ef8919967c07b987"
            ]
        ]
    },
    {
        "id": "cc523ae166b81159",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL') + '-3'\n\nlet Header = flow.get('HeaderAuthHeader')\n\nmsg.headers = { authorization:Header }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1880,
        "wires": [
            [
                "21cc7cf4d71c095f"
            ]
        ]
    },
    {
        "id": "46f0c37bb452f533",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#14",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1740,
        "wires": [
            [
                "e94bdb800cfd0b3b"
            ]
        ]
    },
    {
        "id": "de7509e8abf06055",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#15",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1880,
        "wires": [
            [
                "cc523ae166b81159"
            ]
        ]
    },
    {
        "id": "ef8919967c07b987",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1920,
        "wires": []
    },
    {
        "id": "9ca8b62502254ec5",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1780,
        "wires": []
    },
    {
        "id": "ec064d975c3f74fe",
        "type": "tls-config",
        "name": "local-server",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]