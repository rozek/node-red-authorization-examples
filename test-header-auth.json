[
    {
        "id": "ed0cd56bc0affe28",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "additional endpoints for automated tests",
        "info": "",
        "x": 180,
        "y": 880,
        "wires": []
    },
    {
        "id": "c720182a7e92736d",
        "type": "http in",
        "z": "4e29538c45ba477d",
        "name": "",
        "url": "header-auth-2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 940,
        "wires": [
            [
                "af8ff17b4d3a6c43"
            ]
        ]
    },
    {
        "id": "cdb19bbf2de85977",
        "type": "http in",
        "z": "4e29538c45ba477d",
        "name": "",
        "url": "header-auth-3",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1000,
        "wires": [
            [
                "06783cba24279194"
            ]
        ]
    },
    {
        "id": "af8ff17b4d3a6c43",
        "type": "change",
        "z": "4e29538c45ba477d",
        "name": "require impossible role",
        "rules": [
            {
                "t": "set",
                "p": "requiredRole",
                "pt": "msg",
                "to": "god",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 940,
        "wires": [
            [
                "572ff735abe7de37"
            ]
        ]
    },
    {
        "id": "06783cba24279194",
        "type": "change",
        "z": "4e29538c45ba477d",
        "name": "require possible role",
        "rules": [
            {
                "t": "set",
                "p": "requiredRole",
                "pt": "msg",
                "to": "node-red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1000,
        "wires": [
            [
                "572ff735abe7de37"
            ]
        ]
    },
    {
        "id": "572ff735abe7de37",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "header auth",
        "outputs": 2,
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "05d2ca432072c2ba"
            ],
            [
                "828467f9ecca6845"
            ]
        ]
    },
    {
        "id": "828467f9ecca6845",
        "type": "change",
        "z": "4e29538c45ba477d",
        "name": "inform about success",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "successfully authorized",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1060,
        "wires": [
            [
                "05d2ca432072c2ba"
            ]
        ]
    },
    {
        "id": "05d2ca432072c2ba",
        "type": "http response",
        "z": "4e29538c45ba477d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 1060,
        "wires": []
    },
    {
        "id": "a36fcfe56f19bf44",
        "type": "http in",
        "z": "4e29538c45ba477d",
        "name": "",
        "url": "header-auth-2",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1120,
        "wires": [
            [
                "daa6d4defe290b98"
            ]
        ]
    },
    {
        "id": "b9ebe9f67a0d56e3",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "header login",
        "outputs": 2,
        "x": 130,
        "y": 1240,
        "wires": [
            [
                "5c726962caf910ca"
            ],
            [
                "607aa5f9afa8903e"
            ]
        ],
        "outputLabels": [
            "success",
            "failure"
        ]
    },
    {
        "id": "607aa5f9afa8903e",
        "type": "http response",
        "z": "4e29538c45ba477d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 1240,
        "wires": []
    },
    {
        "id": "23f0aaa91d903928",
        "type": "http in",
        "z": "4e29538c45ba477d",
        "name": "",
        "url": "header-auth-3",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1180,
        "wires": [
            [
                "c3a25d5462d5051a"
            ]
        ]
    },
    {
        "id": "daa6d4defe290b98",
        "type": "change",
        "z": "4e29538c45ba477d",
        "name": "require impossible role",
        "rules": [
            {
                "t": "set",
                "p": "requiredRole",
                "pt": "msg",
                "to": "god",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1120,
        "wires": [
            [
                "b9ebe9f67a0d56e3"
            ]
        ]
    },
    {
        "id": "c3a25d5462d5051a",
        "type": "change",
        "z": "4e29538c45ba477d",
        "name": "require possible role",
        "rules": [
            {
                "t": "set",
                "p": "requiredRole",
                "pt": "msg",
                "to": "node-red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1180,
        "wires": [
            [
                "b9ebe9f67a0d56e3"
            ]
        ]
    },
    {
        "id": "5c726962caf910ca",
        "type": "change",
        "z": "4e29538c45ba477d",
        "name": "inform about success",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "successfully authorized",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1240,
        "wires": [
            [
                "607aa5f9afa8903e"
            ]
        ]
    },
    {
        "id": "f81e260d89d1444f",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "automated tests for Header-based authorization",
        "info": "",
        "x": 860,
        "y": 40,
        "wires": []
    },
    {
        "id": "2378e7619abb1f06",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "login with missing form",
        "info": "",
        "x": 780,
        "y": 760,
        "wires": []
    },
    {
        "id": "e53bf387e71805a9",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "login with incomplete form",
        "info": "",
        "x": 790,
        "y": 900,
        "wires": []
    },
    {
        "id": "fcd0ac43aa7a5e2c",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "login with wrong password",
        "info": "",
        "x": 790,
        "y": 1180,
        "wires": []
    },
    {
        "id": "c360d23c3cb97bb3",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "login with wrong userid",
        "info": "",
        "x": 780,
        "y": 1040,
        "wires": []
    },
    {
        "id": "fc892b9d7ff2fb98",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "login with correct credentials",
        "info": "",
        "x": 800,
        "y": 1320,
        "wires": []
    },
    {
        "id": "65cc65e552a4e4bb",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "19c668c9f48a46ea",
            "0a22f2dccd7a52cd",
            "f709a0eb675e1cfd"
        ],
        "uncaught": false,
        "x": 850,
        "y": 840,
        "wires": [
            [
                "48fbfc651685d5d8"
            ]
        ]
    },
    {
        "id": "19c668c9f48a46ea",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 800,
        "wires": [
            [
                "0a22f2dccd7a52cd"
            ]
        ]
    },
    {
        "id": "0a22f2dccd7a52cd",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 800,
        "wires": [
            [
                "48fbfc651685d5d8"
            ]
        ]
    },
    {
        "id": "f709a0eb675e1cfd",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL')\nmsg.payload = undefined // no form at all\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 800,
        "wires": [
            [
                "19c668c9f48a46ea"
            ]
        ]
    },
    {
        "id": "6e56a2f94d5d33ef",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "4e1f92aebf852abd",
            "fb49f6af95e3f5dc",
            "96676db9b1fae55f"
        ],
        "uncaught": false,
        "x": 850,
        "y": 980,
        "wires": [
            [
                "91618d0860b1298e"
            ]
        ]
    },
    {
        "id": "4e1f92aebf852abd",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 940,
        "wires": [
            [
                "fb49f6af95e3f5dc"
            ]
        ]
    },
    {
        "id": "fb49f6af95e3f5dc",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 940,
        "wires": [
            [
                "91618d0860b1298e"
            ]
        ]
    },
    {
        "id": "96676db9b1fae55f",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL')\nmsg.payload = {\n  UserId:'node-red'\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 940,
        "wires": [
            [
                "4e1f92aebf852abd"
            ]
        ]
    },
    {
        "id": "7991f5b4dc8adc44",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "926db400194b6255",
            "a4afb2067fb9c632",
            "4018e8cdf6c78e1e"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1120,
        "wires": [
            [
                "694770b5d903febe"
            ]
        ]
    },
    {
        "id": "926db400194b6255",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1080,
        "wires": [
            [
                "a4afb2067fb9c632"
            ]
        ]
    },
    {
        "id": "a4afb2067fb9c632",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1080,
        "wires": [
            [
                "694770b5d903febe"
            ]
        ]
    },
    {
        "id": "4018e8cdf6c78e1e",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL')\nmsg.payload = {\n  UserId:'invalid-user',\n  Password:'t0pS3cr3t!'\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1080,
        "wires": [
            [
                "926db400194b6255"
            ]
        ]
    },
    {
        "id": "2061e54ce08ac175",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "5667bc63ba5b557e",
            "50d0cbee0abcacee",
            "c4d6ffda37a545eb"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1260,
        "wires": [
            [
                "294780a62373bb0b"
            ]
        ]
    },
    {
        "id": "5667bc63ba5b557e",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1220,
        "wires": [
            [
                "50d0cbee0abcacee"
            ]
        ]
    },
    {
        "id": "50d0cbee0abcacee",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1220,
        "wires": [
            [
                "294780a62373bb0b"
            ]
        ]
    },
    {
        "id": "c4d6ffda37a545eb",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL')\nmsg.payload = {\n  UserId:'node-red',\n  Password:'invalid-password'\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1220,
        "wires": [
            [
                "5667bc63ba5b557e"
            ]
        ]
    },
    {
        "id": "966b6407a90806d5",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "b8b753373905d093",
            "69487fc27ecb2bea",
            "3ebfaa2a930e5384"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1400,
        "wires": [
            [
                "9043ba0035c8469f"
            ]
        ]
    },
    {
        "id": "b8b753373905d093",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1360,
        "wires": [
            [
                "69487fc27ecb2bea"
            ]
        ]
    },
    {
        "id": "69487fc27ecb2bea",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.headers['authorization']).to.exist\n\nlet Header = msg.headers['authorization']\nexpect(Header).to.match(/^Bearer\\s+node-red:\\d+:[0-9a-f]+$/)\n\nlet [UserId,Expiration,Digest] = Header.replace(/^Bearer\\s+/,'').split(':')\nexpect(UserId).to.equal('node-red')\nexpect(parseInt(Expiration,10)).to.be.at.least(msg.now)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1360,
        "wires": [
            [
                "9043ba0035c8469f"
            ]
        ]
    },
    {
        "id": "3ebfaa2a930e5384",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL')\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1360,
        "wires": [
            [
                "b8b753373905d093"
            ]
        ]
    },
    {
        "id": "9bed4560a7780115",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#1",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 800,
        "wires": [
            [
                "f709a0eb675e1cfd"
            ]
        ]
    },
    {
        "id": "5c2021b67a43b9a6",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#2",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 940,
        "wires": [
            [
                "96676db9b1fae55f"
            ]
        ]
    },
    {
        "id": "d845a53897103990",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#3",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1080,
        "wires": [
            [
                "4018e8cdf6c78e1e"
            ]
        ]
    },
    {
        "id": "4ce6671cbf890495",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#4",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1220,
        "wires": [
            [
                "c4d6ffda37a545eb"
            ]
        ]
    },
    {
        "id": "e45549f8603d8da6",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#5",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1360,
        "wires": [
            [
                "3ebfaa2a930e5384"
            ]
        ]
    },
    {
        "id": "48fbfc651685d5d8",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 840,
        "wires": []
    },
    {
        "id": "91618d0860b1298e",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 980,
        "wires": []
    },
    {
        "id": "694770b5d903febe",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1120,
        "wires": []
    },
    {
        "id": "294780a62373bb0b",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1260,
        "wires": []
    },
    {
        "id": "9043ba0035c8469f",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1400,
        "wires": []
    },
    {
        "id": "81078451c33ead50",
        "type": "link in",
        "z": "4e29538c45ba477d",
        "name": "2nd batch of automated tests",
        "links": [
            "8722ce379dd5ec87"
        ],
        "x": 1535,
        "y": 100,
        "wires": [
            [
                "36653947c07260ec"
            ]
        ]
    },
    {
        "id": "139e0b01b1188918",
        "type": "link in",
        "z": "4e29538c45ba477d",
        "name": "finish automated tests",
        "links": [
            "962075042304e5b6"
        ],
        "x": 1055,
        "y": 160,
        "wires": [
            [
                "2e137e3d672c77b6"
            ]
        ]
    },
    {
        "id": "8722ce379dd5ec87",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "81078451c33ead50"
        ],
        "x": 935,
        "y": 160,
        "wires": []
    },
    {
        "id": "962075042304e5b6",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "139e0b01b1188918"
        ],
        "x": 1635,
        "y": 240,
        "wires": []
    },
    {
        "id": "6e59dbb2566deea3",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "run Tests",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 760,
        "y": 100,
        "wires": [
            [
                "41f542db2a2f26e3"
            ]
        ]
    },
    {
        "id": "100c746b02a9c77f",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "reset totals",
        "func": "flow.set('Totals',0)\n\nmsg.TestMode = '-'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 100,
        "wires": [
            [
                "2e137e3d672c77b6",
                "a52e25b5c89f3be8"
            ]
        ]
    },
    {
        "id": "2e137e3d672c77b6",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "Status",
        "func": "switch (true) {\n  case (msg.TestMode === '-'):\n    node.status({})\n    break\n  case (flow.get('Totals') === 0):\n    node.status({fill:'green',shape:'dot',text:'ok'})\n    break\n  default:\n    node.status({fill:'red',shape:'dot',text:'failed'})\n}\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 140,
        "wires": []
    },
    {
        "id": "a52e25b5c89f3be8",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "dispatch",
        "func": "if (context.get('pendingList') == null) { // first invocation\n  msg.TestMode = 'multiple-tests'\n\n  let MsgList = [null], pendingList = []\n  for (let i = 1, l = node.outputCount; i < l; i++) {\n    MsgList.push(null)\n    pendingList.push(i)\n  }\n  context.set('MsgList',MsgList)\n  context.set('pendingList',pendingList)\n}\n\nlet pendingList = context.get('pendingList')\nif (pendingList.length === 0) { // all tests completed\n  context.set('pendingList',null)\n  return [msg]\n} else { // ongoing tests\n  let msg = {} // create new, empty \"msg\" object\n\n  let chosenIndex  = Math.floor(Math.random()*pendingList.length)\n  let chosenOutput = pendingList.splice(chosenIndex,1)[0]\n\n  context.set('pendingList',pendingList)\n\n  let MsgList = context.get('MsgList').slice()\n    MsgList[chosenOutput] = msg\n  return MsgList\n}\n",
        "outputs": 8,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 200,
        "wires": [
            [
                "8722ce379dd5ec87"
            ],
            [
                "78246d763c32200a"
            ],
            [
                "481de8f3201e2e07"
            ],
            [
                "81dccf9baf39b1ab"
            ],
            [
                "c4bbdf827efd561d"
            ],
            [
                "6a1d243d7f2b51e8"
            ],
            [
                "164e070d06377c17"
            ],
            [
                "304131a94989e2a1"
            ]
        ]
    },
    {
        "id": "93a3885db8911f91",
        "type": "link in",
        "z": "4e29538c45ba477d",
        "name": "Header-based Authorization I",
        "links": [
            "88eec75a427c5751",
            "a3edc810eb038804",
            "a2b3389431ec2ea8",
            "cd0a6140ed89b044",
            "6ff4f8a510e53cf7",
            "5fe0d6f40f187bd5",
            "9c8fc2c5d5cc58fa",
            "33bbbc60b57cd10a",
            "b5b9fc0ef12d216d"
        ],
        "x": 695,
        "y": 200,
        "wires": [
            [
                "a52e25b5c89f3be8"
            ]
        ]
    },
    {
        "id": "41f542db2a2f26e3",
        "type": "change",
        "z": "4e29538c45ba477d",
        "name": "configure",
        "rules": [
            {
                "t": "set",
                "p": "HeaderAuthURL",
                "pt": "flow",
                "to": "http://127.0.0.1:1880/header-auth",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 100,
        "wires": [
            [
                "100c746b02a9c77f"
            ]
        ]
    },
    {
        "id": "028e6893ceaaf8d2",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 300,
        "wires": [
            [
                "5fe0d6f40f187bd5"
            ]
        ]
    },
    {
        "id": "cfd1a9deed7b04e3",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 300,
        "wires": [
            [
                "78246d763c32200a"
            ]
        ]
    },
    {
        "id": "5fe0d6f40f187bd5",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "93a3885db8911f91",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 300,
        "wires": []
    },
    {
        "id": "38a71b42637c0396",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 320,
        "wires": [
            [
                "028e6893ceaaf8d2"
            ]
        ]
    },
    {
        "id": "1fd3190f08974edd",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 360,
        "wires": [
            [
                "cd0a6140ed89b044"
            ]
        ]
    },
    {
        "id": "3e8ae0591cc7a621",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 360,
        "wires": [
            [
                "481de8f3201e2e07"
            ]
        ]
    },
    {
        "id": "cd0a6140ed89b044",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "93a3885db8911f91",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 360,
        "wires": []
    },
    {
        "id": "67e42370830b5da9",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 380,
        "wires": [
            [
                "1fd3190f08974edd"
            ]
        ]
    },
    {
        "id": "37e64baacaf67a0c",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 420,
        "wires": [
            [
                "a3edc810eb038804"
            ]
        ]
    },
    {
        "id": "4cc80654a1f6125e",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 420,
        "wires": [
            [
                "81dccf9baf39b1ab"
            ]
        ]
    },
    {
        "id": "a3edc810eb038804",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "93a3885db8911f91",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 420,
        "wires": []
    },
    {
        "id": "2e46efc05bed97b4",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 440,
        "wires": [
            [
                "37e64baacaf67a0c"
            ]
        ]
    },
    {
        "id": "ba4f944ca47faa1f",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 480,
        "wires": [
            [
                "6ff4f8a510e53cf7"
            ]
        ]
    },
    {
        "id": "6f22eb95b843e5fb",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 480,
        "wires": [
            [
                "c4bbdf827efd561d"
            ]
        ]
    },
    {
        "id": "6ff4f8a510e53cf7",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "93a3885db8911f91",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 480,
        "wires": []
    },
    {
        "id": "e3724f6a1be5b79d",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "ba4f944ca47faa1f"
            ]
        ]
    },
    {
        "id": "97924a879e02842c",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 540,
        "wires": [
            [
                "a2b3389431ec2ea8"
            ]
        ]
    },
    {
        "id": "0140143a5b88108c",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 540,
        "wires": [
            [
                "6a1d243d7f2b51e8"
            ]
        ]
    },
    {
        "id": "a2b3389431ec2ea8",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "93a3885db8911f91",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 540,
        "wires": []
    },
    {
        "id": "bbb693c243ac304d",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 560,
        "wires": [
            [
                "97924a879e02842c"
            ]
        ]
    },
    {
        "id": "78246d763c32200a",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#1",
        "outputs": 1,
        "x": 870,
        "y": 300,
        "wires": [
            [
                "028e6893ceaaf8d2"
            ]
        ]
    },
    {
        "id": "481de8f3201e2e07",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#2",
        "outputs": 1,
        "x": 870,
        "y": 360,
        "wires": [
            [
                "1fd3190f08974edd"
            ]
        ]
    },
    {
        "id": "81dccf9baf39b1ab",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#3",
        "outputs": 1,
        "x": 870,
        "y": 420,
        "wires": [
            [
                "37e64baacaf67a0c"
            ]
        ]
    },
    {
        "id": "c4bbdf827efd561d",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#4",
        "outputs": 1,
        "x": 870,
        "y": 480,
        "wires": [
            [
                "ba4f944ca47faa1f"
            ]
        ]
    },
    {
        "id": "6a1d243d7f2b51e8",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#5",
        "outputs": 1,
        "x": 870,
        "y": 540,
        "wires": [
            [
                "97924a879e02842c"
            ]
        ]
    },
    {
        "id": "169aca66be1974b2",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 600,
        "wires": [
            [
                "9c8fc2c5d5cc58fa"
            ]
        ]
    },
    {
        "id": "dae12f1d49d50a2a",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 600,
        "wires": [
            [
                "164e070d06377c17"
            ]
        ]
    },
    {
        "id": "9c8fc2c5d5cc58fa",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "93a3885db8911f91",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 600,
        "wires": []
    },
    {
        "id": "03a86520b5b962bd",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 620,
        "wires": [
            [
                "169aca66be1974b2"
            ]
        ]
    },
    {
        "id": "008730fa1ae9cc94",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 660,
        "wires": [
            [
                "33bbbc60b57cd10a"
            ]
        ]
    },
    {
        "id": "a2cbef6ddf8742d5",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 660,
        "wires": [
            [
                "304131a94989e2a1"
            ]
        ]
    },
    {
        "id": "33bbbc60b57cd10a",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "93a3885db8911f91",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 660,
        "wires": []
    },
    {
        "id": "f91a80a663f4deae",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "008730fa1ae9cc94"
            ]
        ]
    },
    {
        "id": "164e070d06377c17",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#6",
        "outputs": 1,
        "x": 870,
        "y": 600,
        "wires": [
            [
                "169aca66be1974b2"
            ]
        ]
    },
    {
        "id": "304131a94989e2a1",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#7",
        "outputs": 1,
        "x": 870,
        "y": 660,
        "wires": [
            [
                "008730fa1ae9cc94"
            ]
        ]
    },
    {
        "id": "3821a16fd6ab5001",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "login with wrong required role",
        "info": "",
        "x": 800,
        "y": 1460,
        "wires": []
    },
    {
        "id": "0b71247a78f7d143",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "login with correct required role",
        "info": "",
        "x": 800,
        "y": 1600,
        "wires": []
    },
    {
        "id": "5b273ca966f0185f",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "91045012dd9c3e3d",
            "7ef86a6126cd8dec",
            "c759052b5b980ee5"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1540,
        "wires": [
            [
                "1b5971026d19ec18"
            ]
        ]
    },
    {
        "id": "91045012dd9c3e3d",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1500,
        "wires": [
            [
                "7ef86a6126cd8dec"
            ]
        ]
    },
    {
        "id": "7ef86a6126cd8dec",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1500,
        "wires": [
            [
                "1b5971026d19ec18"
            ]
        ]
    },
    {
        "id": "c759052b5b980ee5",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL') + '-2'\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1500,
        "wires": [
            [
                "91045012dd9c3e3d"
            ]
        ]
    },
    {
        "id": "fd09669a36f60c78",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "70bd1b6d3cdbdeea",
            "81c532e7a00c15ea",
            "546d468031a94533"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1680,
        "wires": [
            [
                "28551973ebce074c"
            ]
        ]
    },
    {
        "id": "70bd1b6d3cdbdeea",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1640,
        "wires": [
            [
                "81c532e7a00c15ea"
            ]
        ]
    },
    {
        "id": "81c532e7a00c15ea",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.headers['authorization']).to.exist\n\nlet Header = msg.headers['authorization']\nexpect(Header).to.match(/^Bearer\\s+node-red:\\d+:[0-9a-f]+$/)\n\nlet [UserId,Expiration,Digest] = Header.replace(/^Bearer\\s+/,'').split(':')\nexpect(UserId).to.equal('node-red')\nexpect(parseInt(Expiration,10)).to.be.at.least(msg.now)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1640,
        "wires": [
            [
                "28551973ebce074c"
            ]
        ]
    },
    {
        "id": "546d468031a94533",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url     = flow.get('HeaderAuthURL') + '-3'\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1640,
        "wires": [
            [
                "70bd1b6d3cdbdeea"
            ]
        ]
    },
    {
        "id": "c13acb7c6b484677",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#6",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1500,
        "wires": [
            [
                "c759052b5b980ee5"
            ]
        ]
    },
    {
        "id": "552242571b496058",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#7",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1640,
        "wires": [
            [
                "546d468031a94533"
            ]
        ]
    },
    {
        "id": "1b5971026d19ec18",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1540,
        "wires": []
    },
    {
        "id": "28551973ebce074c",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1680,
        "wires": []
    },
    {
        "id": "35a8e3d0bdae2570",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "dispatch",
        "func": "if (context.get('pendingList') == null) { // first invocation\n  msg.TestMode = 'multiple-tests'\n\n  let MsgList = [null], pendingList = []\n  for (let i = 1, l = node.outputCount; i < l; i++) {\n    MsgList.push(null)\n    pendingList.push(i)\n  }\n  context.set('MsgList',MsgList)\n  context.set('pendingList',pendingList)\n}\n\nlet pendingList = context.get('pendingList')\nif (pendingList.length === 0) { // all tests completed\n  context.set('pendingList',null)\n  return [msg]\n} else { // ongoing tests\n  let msg = {} // create new, empty \"msg\" object\n\n  let chosenIndex  = Math.floor(Math.random()*pendingList.length)\n  let chosenOutput = pendingList.splice(chosenIndex,1)[0]\n\n  context.set('pendingList',pendingList)\n\n  let MsgList = context.get('MsgList').slice()\n    MsgList[chosenOutput] = msg\n  return MsgList\n}\n",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 240,
        "wires": [
            [
                "962075042304e5b6"
            ],
            [
                "bdd854ebf1812030"
            ],
            [
                "1b2a984f4e8759b6"
            ],
            [
                "457123c9716d4ff7"
            ],
            [
                "ecfbbbda7ed495bb"
            ],
            [
                "1d7d4da6c88bc7a1"
            ],
            [
                "fd2be6d10cfff6b1"
            ],
            [
                "fe9e8a486380ae39"
            ],
            [
                "323d9fd44dab80f1"
            ]
        ]
    },
    {
        "id": "36653947c07260ec",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "login properly",
        "func": "msg.url     = flow.get('HeaderAuthURL')\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 140,
        "wires": [
            [
                "c889cccaab5a0a67"
            ]
        ]
    },
    {
        "id": "abedd48969e0f7c6",
        "type": "link in",
        "z": "4e29538c45ba477d",
        "name": "Header-based Authorization II",
        "links": [
            "c178728cbc03a8c9",
            "e425d2bbd0dd01b4",
            "5276f213bd476d9d",
            "0fe8cf6859a13122",
            "44bc61dd74edf9ad",
            "1f5f744aa9c50408",
            "948c85c17c58f972",
            "97ed8736a8eb7fdb"
        ],
        "x": 1355,
        "y": 240,
        "wires": [
            [
                "35a8e3d0bdae2570"
            ]
        ]
    },
    {
        "id": "b18cd8f4e8340dde",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 340,
        "wires": [
            [
                "c178728cbc03a8c9"
            ]
        ]
    },
    {
        "id": "564a21e1d8153e43",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 340,
        "wires": [
            [
                "bdd854ebf1812030"
            ]
        ]
    },
    {
        "id": "c178728cbc03a8c9",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "abedd48969e0f7c6"
        ],
        "x": 1875,
        "y": 340,
        "wires": []
    },
    {
        "id": "5dab7bb6e2ec24de",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 360,
        "wires": [
            [
                "b18cd8f4e8340dde"
            ]
        ]
    },
    {
        "id": "79c76e9684f338ed",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 400,
        "wires": [
            [
                "0fe8cf6859a13122"
            ]
        ]
    },
    {
        "id": "192db1b61c951e75",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 400,
        "wires": [
            [
                "1b2a984f4e8759b6"
            ]
        ]
    },
    {
        "id": "0fe8cf6859a13122",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "abedd48969e0f7c6"
        ],
        "x": 1875,
        "y": 400,
        "wires": []
    },
    {
        "id": "7a4f58c6b649ecb5",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 420,
        "wires": [
            [
                "79c76e9684f338ed"
            ]
        ]
    },
    {
        "id": "f9ae35e16fd23e14",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 460,
        "wires": [
            [
                "e425d2bbd0dd01b4"
            ]
        ]
    },
    {
        "id": "a9a0abbce408aecc",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 460,
        "wires": [
            [
                "457123c9716d4ff7"
            ]
        ]
    },
    {
        "id": "e425d2bbd0dd01b4",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "abedd48969e0f7c6"
        ],
        "x": 1875,
        "y": 460,
        "wires": []
    },
    {
        "id": "c62e3930c7a62ea1",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 480,
        "wires": [
            [
                "f9ae35e16fd23e14"
            ]
        ]
    },
    {
        "id": "f35d71c0dc54aa1c",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 520,
        "wires": [
            [
                "44bc61dd74edf9ad"
            ]
        ]
    },
    {
        "id": "17c7cea72c29409e",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 520,
        "wires": [
            [
                "ecfbbbda7ed495bb"
            ]
        ]
    },
    {
        "id": "44bc61dd74edf9ad",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "abedd48969e0f7c6"
        ],
        "x": 1875,
        "y": 520,
        "wires": []
    },
    {
        "id": "53151004f20bba73",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 540,
        "wires": [
            [
                "f35d71c0dc54aa1c"
            ]
        ]
    },
    {
        "id": "6747400249662cda",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 580,
        "wires": [
            [
                "1f5f744aa9c50408"
            ]
        ]
    },
    {
        "id": "7c4ec5711a86252c",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 580,
        "wires": [
            [
                "1d7d4da6c88bc7a1"
            ]
        ]
    },
    {
        "id": "1f5f744aa9c50408",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "abedd48969e0f7c6"
        ],
        "x": 1875,
        "y": 580,
        "wires": []
    },
    {
        "id": "bea523a37d19e2bd",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 600,
        "wires": [
            [
                "6747400249662cda"
            ]
        ]
    },
    {
        "id": "d9799554a147f0cf",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 640,
        "wires": [
            [
                "5276f213bd476d9d"
            ]
        ]
    },
    {
        "id": "dffc501bf1340a67",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 640,
        "wires": [
            [
                "fd2be6d10cfff6b1"
            ]
        ]
    },
    {
        "id": "5276f213bd476d9d",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "abedd48969e0f7c6"
        ],
        "x": 1875,
        "y": 640,
        "wires": []
    },
    {
        "id": "af692e4528afc37d",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 660,
        "wires": [
            [
                "d9799554a147f0cf"
            ]
        ]
    },
    {
        "id": "c889cccaab5a0a67",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "http",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1590,
        "y": 140,
        "wires": [
            [
                "a1e697ee8edfd931"
            ]
        ]
    },
    {
        "id": "a1e697ee8edfd931",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.headers['authorization']).to.exist\n\nlet Header = msg.headers['authorization']\nexpect(Header).to.match(/^Bearer\\s+node-red:\\d+:[0-9a-f]+$/)\n\nlet [UserId,Expiration,Digest] = Header.replace(/^Bearer\\s+/,'').split(':')\nexpect(UserId).to.equal('node-red')\nexpect(parseInt(Expiration,10)).to.be.at.least(msg.now)\n\nflow.set('HeaderAuthHeader',Header)\n\nif (msg.TestMode !== 'single-test') {\n  return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1710,
        "y": 140,
        "wires": [
            [
                "35a8e3d0bdae2570"
            ]
        ]
    },
    {
        "id": "0e517530c6d13af6",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "c889cccaab5a0a67",
            "a1e697ee8edfd931",
            "36653947c07260ec"
        ],
        "uncaught": false,
        "x": 1670,
        "y": 180,
        "wires": [
            [
                "e91d3ac82dea5966"
            ]
        ]
    },
    {
        "id": "e91d3ac82dea5966",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({})\n  } else {\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 180,
        "wires": [
            [
                "b5b9fc0ef12d216d"
            ]
        ]
    },
    {
        "id": "b5b9fc0ef12d216d",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "2127d920bb2faa12",
            "a2d05779d9af1600",
            "93a3885db8911f91"
        ],
        "x": 1875,
        "y": 180,
        "wires": []
    },
    {
        "id": "edcf826fb8d4d9a9",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 100,
        "wires": [
            [
                "36653947c07260ec"
            ]
        ]
    },
    {
        "id": "bdd854ebf1812030",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#8",
        "outputs": 1,
        "x": 1530,
        "y": 340,
        "wires": [
            [
                "b18cd8f4e8340dde"
            ]
        ]
    },
    {
        "id": "1b2a984f4e8759b6",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#9",
        "outputs": 1,
        "x": 1530,
        "y": 400,
        "wires": [
            [
                "79c76e9684f338ed"
            ]
        ]
    },
    {
        "id": "457123c9716d4ff7",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#10",
        "outputs": 1,
        "x": 1530,
        "y": 460,
        "wires": [
            [
                "f9ae35e16fd23e14"
            ]
        ]
    },
    {
        "id": "ecfbbbda7ed495bb",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#11",
        "outputs": 1,
        "x": 1530,
        "y": 520,
        "wires": [
            [
                "f35d71c0dc54aa1c"
            ]
        ]
    },
    {
        "id": "1d7d4da6c88bc7a1",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#12",
        "outputs": 1,
        "x": 1530,
        "y": 580,
        "wires": [
            [
                "6747400249662cda"
            ]
        ]
    },
    {
        "id": "fd2be6d10cfff6b1",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#13",
        "outputs": 1,
        "x": 1530,
        "y": 640,
        "wires": [
            [
                "d9799554a147f0cf"
            ]
        ]
    },
    {
        "id": "c7a5f2345fb3a417",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 700,
        "wires": [
            [
                "948c85c17c58f972"
            ]
        ]
    },
    {
        "id": "0c80a14ca091f6fa",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 700,
        "wires": [
            [
                "fe9e8a486380ae39"
            ]
        ]
    },
    {
        "id": "948c85c17c58f972",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "abedd48969e0f7c6"
        ],
        "x": 1875,
        "y": 700,
        "wires": []
    },
    {
        "id": "dae5f972626dd126",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 720,
        "wires": [
            [
                "c7a5f2345fb3a417"
            ]
        ]
    },
    {
        "id": "1f8f66b163564f98",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 760,
        "wires": [
            [
                "97ed8736a8eb7fdb"
            ]
        ]
    },
    {
        "id": "ef6addb6d482db4f",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 760,
        "wires": [
            [
                "323d9fd44dab80f1"
            ]
        ]
    },
    {
        "id": "97ed8736a8eb7fdb",
        "type": "link out",
        "z": "4e29538c45ba477d",
        "name": "",
        "links": [
            "abedd48969e0f7c6"
        ],
        "x": 1875,
        "y": 760,
        "wires": []
    },
    {
        "id": "af4dbe1616c3d5f7",
        "type": "inject",
        "z": "4e29538c45ba477d",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 780,
        "wires": [
            [
                "1f8f66b163564f98"
            ]
        ]
    },
    {
        "id": "fe9e8a486380ae39",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#14",
        "outputs": 1,
        "x": 1530,
        "y": 700,
        "wires": [
            [
                "c7a5f2345fb3a417"
            ]
        ]
    },
    {
        "id": "323d9fd44dab80f1",
        "type": "reusable",
        "z": "4e29538c45ba477d",
        "name": "",
        "target": "#15",
        "outputs": 1,
        "x": 1530,
        "y": 760,
        "wires": [
            [
                "1f8f66b163564f98"
            ]
        ]
    },
    {
        "id": "7685d37f51f19cc4",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "get without authorization header",
        "info": "",
        "x": 1470,
        "y": 860,
        "wires": []
    },
    {
        "id": "a9e274e1bc6c8411",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "get with broken authorization header",
        "info": "",
        "x": 1480,
        "y": 1000,
        "wires": []
    },
    {
        "id": "6a44ab193b3fb5bf",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "get with modified userid",
        "info": "",
        "x": 1440,
        "y": 1140,
        "wires": []
    },
    {
        "id": "ef757cd92ff23ba2",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "get with modified expiration",
        "info": "",
        "x": 1460,
        "y": 1280,
        "wires": []
    },
    {
        "id": "de6197ba6051a5fe",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "get with modified digest",
        "info": "",
        "x": 1440,
        "y": 1420,
        "wires": []
    },
    {
        "id": "b012e5900987630b",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "get with correct authorization header",
        "info": "",
        "x": 1480,
        "y": 1560,
        "wires": []
    },
    {
        "id": "b0fb3d8d614eb78b",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "17554944c4a56a61",
            "7bbac5263263b69f",
            "f8c5c6ce30d66c7f"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 940,
        "wires": [
            [
                "4c0c7761ca66c8ea"
            ]
        ]
    },
    {
        "id": "17554944c4a56a61",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 900,
        "wires": [
            [
                "7bbac5263263b69f"
            ]
        ]
    },
    {
        "id": "7bbac5263263b69f",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 900,
        "wires": [
            [
                "4c0c7761ca66c8ea"
            ]
        ]
    },
    {
        "id": "f8c5c6ce30d66c7f",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL')\n\nmsg.headers = msg.headers || {}\ndelete msg.headers['authorization']\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 900,
        "wires": [
            [
                "17554944c4a56a61"
            ]
        ]
    },
    {
        "id": "58983609660c295c",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "a73daa76ce0bb526",
            "8935d69a9c43d669",
            "4aaa24ddf2a18e51"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1080,
        "wires": [
            [
                "371f1948c7f61e39"
            ]
        ]
    },
    {
        "id": "a73daa76ce0bb526",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1040,
        "wires": [
            [
                "8935d69a9c43d669"
            ]
        ]
    },
    {
        "id": "8935d69a9c43d669",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1040,
        "wires": [
            [
                "371f1948c7f61e39"
            ]
        ]
    },
    {
        "id": "4aaa24ddf2a18e51",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL')\nmsg.headers = { authorization:'Bearer : : : : : : : broken-header' }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1040,
        "wires": [
            [
                "a73daa76ce0bb526"
            ]
        ]
    },
    {
        "id": "d503be57f8f61cf0",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "9c4c8a4bba096531",
            "b163bb1857aee92b",
            "144d5eb05aaa166a"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1220,
        "wires": [
            [
                "22168ae4f305ddf2"
            ]
        ]
    },
    {
        "id": "9c4c8a4bba096531",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1180,
        "wires": [
            [
                "b163bb1857aee92b"
            ]
        ]
    },
    {
        "id": "b163bb1857aee92b",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1180,
        "wires": [
            [
                "22168ae4f305ddf2"
            ]
        ]
    },
    {
        "id": "144d5eb05aaa166a",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL')\n\nlet Header = flow.get('HeaderAuthHeader')\nlet [UserId,Expiration,Digest] = Header.replace(/^Bearer\\s+/,'').split(':')\n\nUserId = 'node-green'\n\nmsg.headers = { authorization:'Bearer ' + UserId + ':' + Expiration + ':' + Digest }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1180,
        "wires": [
            [
                "9c4c8a4bba096531"
            ]
        ]
    },
    {
        "id": "b2265713155d1d90",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "c066f0ccee9a34f1",
            "29daab80fc33f84a",
            "4909e25f17488a79"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1360,
        "wires": [
            [
                "dcf0fe3105903a8a"
            ]
        ]
    },
    {
        "id": "c066f0ccee9a34f1",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1320,
        "wires": [
            [
                "29daab80fc33f84a"
            ]
        ]
    },
    {
        "id": "29daab80fc33f84a",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1320,
        "wires": [
            [
                "dcf0fe3105903a8a"
            ]
        ]
    },
    {
        "id": "4909e25f17488a79",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL')\n\nlet Header = flow.get('HeaderAuthHeader')\nlet [UserId,Expiration,Digest] = Header.replace(/^Bearer\\s+/,'').split(':')\n\nExpiration = parseInt(Expiration,10) + 365*24*60*60*1000\n\nmsg.headers = { authorization:'Bearer ' + UserId + ':' + Expiration + ':' + Digest }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1320,
        "wires": [
            [
                "c066f0ccee9a34f1"
            ]
        ]
    },
    {
        "id": "27ae8a65d3bf686a",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "316ac49bfc337c27",
            "92740df5d81df668",
            "04bd1d6e1656598c"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1500,
        "wires": [
            [
                "a85bec90aef1edc0"
            ]
        ]
    },
    {
        "id": "316ac49bfc337c27",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1460,
        "wires": [
            [
                "92740df5d81df668"
            ]
        ]
    },
    {
        "id": "92740df5d81df668",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1460,
        "wires": [
            [
                "a85bec90aef1edc0"
            ]
        ]
    },
    {
        "id": "04bd1d6e1656598c",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL')\n\nlet Header = flow.get('HeaderAuthHeader')\nlet [UserId,Expiration,Digest] = Header.replace(/^Bearer\\s+/,'').split(':')\n\nDigest = 'c3da5c194d3104f6ff5986cd79cc3dada0bc14447330c7da0eb8299091188d7b'\n\nmsg.headers = { authorization:'Bearer ' + UserId + ':' + Expiration + ':' + Digest }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1460,
        "wires": [
            [
                "316ac49bfc337c27"
            ]
        ]
    },
    {
        "id": "7bb45842e2248489",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "508cd8da30d8e436",
            "372dfc4bcbf99f75",
            "78b53203f7c04f80"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1640,
        "wires": [
            [
                "230678b8afded32d"
            ]
        ]
    },
    {
        "id": "508cd8da30d8e436",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1600,
        "wires": [
            [
                "372dfc4bcbf99f75"
            ]
        ]
    },
    {
        "id": "372dfc4bcbf99f75",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.headers['authorization']).to.exist\n\nlet newHeader = msg.headers['authorization']\nexpect(newHeader).to.match(/^Bearer\\s+node-red:\\d+:[0-9a-f]+$/)\n\nlet [newUserId,newExpiration,newDigest] = newHeader.replace(/^Bearer\\s+/,'').split(':')\n\nlet oldHeader = flow.get('HeaderAuthHeader')\nlet [oldUserId,oldExpiration,oldDigest] = oldHeader.replace(/^Bearer\\s+/,'').split(':')\n\nexpect(newUserId).to.equal(oldUserId)\nexpect(parseInt(newExpiration,10)).to.be.at.least(parseInt(oldExpiration,10))\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1600,
        "wires": [
            [
                "230678b8afded32d"
            ]
        ]
    },
    {
        "id": "78b53203f7c04f80",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL')\n\nlet Header = flow.get('HeaderAuthHeader')\n\nmsg.headers = { authorization:Header }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1600,
        "wires": [
            [
                "508cd8da30d8e436"
            ]
        ]
    },
    {
        "id": "6a622391f492bbcd",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#8",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 900,
        "wires": [
            [
                "f8c5c6ce30d66c7f"
            ]
        ]
    },
    {
        "id": "d4cc0fc2d46bf6e7",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#9",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1040,
        "wires": [
            [
                "4aaa24ddf2a18e51"
            ]
        ]
    },
    {
        "id": "7f74c3b456df2cfe",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#10",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1180,
        "wires": [
            [
                "144d5eb05aaa166a"
            ]
        ]
    },
    {
        "id": "cb5be0ab1bfabf38",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#11",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1320,
        "wires": [
            [
                "4909e25f17488a79"
            ]
        ]
    },
    {
        "id": "04cd1af55fdd743b",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#12",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1460,
        "wires": [
            [
                "04bd1d6e1656598c"
            ]
        ]
    },
    {
        "id": "8f34ddb3f159834c",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#13",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1600,
        "wires": [
            [
                "78b53203f7c04f80"
            ]
        ]
    },
    {
        "id": "230678b8afded32d",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1640,
        "wires": []
    },
    {
        "id": "a85bec90aef1edc0",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1500,
        "wires": []
    },
    {
        "id": "dcf0fe3105903a8a",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1360,
        "wires": []
    },
    {
        "id": "22168ae4f305ddf2",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1220,
        "wires": []
    },
    {
        "id": "371f1948c7f61e39",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1080,
        "wires": []
    },
    {
        "id": "4c0c7761ca66c8ea",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 940,
        "wires": []
    },
    {
        "id": "d226580d305fcffe",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "get with wrong required role",
        "info": "",
        "x": 1460,
        "y": 1700,
        "wires": []
    },
    {
        "id": "f920c0dcf8bc1895",
        "type": "comment",
        "z": "4e29538c45ba477d",
        "name": "get with correct required role",
        "info": "",
        "x": 1460,
        "y": 1840,
        "wires": []
    },
    {
        "id": "abe64b70eef3485a",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "da3b386844aa7f5e",
            "888ced533669737d",
            "5e30af554119c266"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1780,
        "wires": [
            [
                "9eae790686b2f548"
            ]
        ]
    },
    {
        "id": "da3b386844aa7f5e",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1740,
        "wires": [
            [
                "888ced533669737d"
            ]
        ]
    },
    {
        "id": "888ced533669737d",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\nexpect(msg.headers['authorization']).not.to.exist\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1740,
        "wires": [
            [
                "9eae790686b2f548"
            ]
        ]
    },
    {
        "id": "5e30af554119c266",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL') + '-2'\n\nlet Header = flow.get('HeaderAuthHeader')\n\nmsg.headers = { authorization:Header }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1740,
        "wires": [
            [
                "da3b386844aa7f5e"
            ]
        ]
    },
    {
        "id": "0356b8e522f7605f",
        "type": "catch",
        "z": "4e29538c45ba477d",
        "name": "",
        "scope": [
            "db8cd7f0714f8119",
            "42397437a4b39062",
            "60787ba146fcfcbe"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1920,
        "wires": [
            [
                "64b109512ad6a0a5"
            ]
        ]
    },
    {
        "id": "db8cd7f0714f8119",
        "type": "http request",
        "z": "4e29538c45ba477d",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1880,
        "wires": [
            [
                "42397437a4b39062"
            ]
        ]
    },
    {
        "id": "42397437a4b39062",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.headers['authorization']).to.exist\n\nlet newHeader = msg.headers['authorization']\nexpect(newHeader).to.match(/^Bearer\\s+node-red:\\d+:[0-9a-f]+$/)\n\nlet [newUserId,newExpiration,newDigest] = newHeader.replace(/^Bearer\\s+/,'').split(':')\n\nlet oldHeader = flow.get('HeaderAuthHeader')\nlet [oldUserId,oldExpiration,oldDigest] = oldHeader.replace(/^Bearer\\s+/,'').split(':')\n\nexpect(newUserId).to.equal(oldUserId)\nexpect(parseInt(newExpiration,10)).to.be.at.least(parseInt(oldExpiration,10))\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1880,
        "wires": [
            [
                "64b109512ad6a0a5"
            ]
        ]
    },
    {
        "id": "60787ba146fcfcbe",
        "type": "function",
        "z": "4e29538c45ba477d",
        "name": "arrange",
        "func": "msg.url = flow.get('HeaderAuthURL') + '-3'\n\nlet Header = flow.get('HeaderAuthHeader')\n\nmsg.headers = { authorization:Header }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1880,
        "wires": [
            [
                "db8cd7f0714f8119"
            ]
        ]
    },
    {
        "id": "1fecf6b016de916b",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#14",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1740,
        "wires": [
            [
                "5e30af554119c266"
            ]
        ]
    },
    {
        "id": "ef88171a20f8171e",
        "type": "reusable-in",
        "z": "4e29538c45ba477d",
        "name": "#15",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1880,
        "wires": [
            [
                "60787ba146fcfcbe"
            ]
        ]
    },
    {
        "id": "64b109512ad6a0a5",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1920,
        "wires": []
    },
    {
        "id": "9eae790686b2f548",
        "type": "reusable-out",
        "z": "4e29538c45ba477d",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1780,
        "wires": []
    },
    {
        "id": "ec064d975c3f74fe",
        "type": "tls-config",
        "name": "local-server",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]