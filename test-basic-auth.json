[
    {
        "id": "8cd12d6a50be4f0d",
        "type": "comment",
        "z": "c63466f5ec185814",
        "name": "automated tests for basic HTTP authorization",
        "info": "",
        "x": 850,
        "y": 40,
        "wires": []
    },
    {
        "id": "e9621ef6b5e8d399",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": "run Tests",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 760,
        "y": 100,
        "wires": [
            [
                "c16254dad01ade88"
            ]
        ]
    },
    {
        "id": "b7c3ba944807c5f6",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "reset totals",
        "func": "flow.set('Totals',0)\n\nmsg.TestMode = '-'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 100,
        "wires": [
            [
                "a945edfe3feec7f0",
                "aed35f911282c85c"
            ]
        ]
    },
    {
        "id": "a945edfe3feec7f0",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "Status",
        "func": "switch (true) {\n  case (msg.TestMode === '-'):\n    node.status({})\n    break\n  case (flow.get('Totals') === 0):\n    node.status({fill:'green',shape:'dot',text:'ok'})\n    break\n  default:\n    node.status({fill:'red',shape:'dot',text:'failed'})\n}\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 140,
        "wires": []
    },
    {
        "id": "aed35f911282c85c",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "dispatch",
        "func": "if (context.get('pendingList') == null) { // first invocation\n  msg.TestMode = 'multiple-tests'\n\n  let MsgList = [null], pendingList = []\n  for (let i = 1, l = node.outputCount; i < l; i++) {\n    MsgList.push(null)\n    pendingList.push(i)\n  }\n  context.set('MsgList',MsgList)\n  context.set('pendingList',pendingList)\n}\n\nlet pendingList = context.get('pendingList')\nif (pendingList.length === 0) { // all tests completed\n  context.set('pendingList',null)\n  return [msg]\n} else { // ongoing tests\n  let msg = {} // create new, empty \"msg\" object\n\n  let chosenIndex  = Math.floor(Math.random()*pendingList.length)\n  let chosenOutput = pendingList.splice(chosenIndex,1)[0]\n\n  context.set('pendingList',pendingList)\n\n  let MsgList = context.get('MsgList').slice()\n    MsgList[chosenOutput] = msg\n  return MsgList\n}\n",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 180,
        "wires": [
            [
                "a945edfe3feec7f0"
            ],
            [
                "9d071d7cb23bcc41"
            ],
            [
                "d31ed0740d22278f"
            ],
            [
                "18a32bab246f1254"
            ],
            [
                "a9260ba83be585c1"
            ],
            [
                "5c157261930bd73e"
            ],
            [
                "a7696e80a60cf34d"
            ]
        ]
    },
    {
        "id": "6cfddc52b5d4c4b8",
        "type": "link in",
        "z": "c63466f5ec185814",
        "name": "basic HTTP authentication",
        "links": [
            "2809c8fb457377a8",
            "719398a1101e10a8",
            "c738f18a0fbe68bb",
            "cd0eca0806f20b06",
            "0a2f3530f2a1b79e",
            "b57693fcd0b44601"
        ],
        "x": 695,
        "y": 180,
        "wires": [
            [
                "aed35f911282c85c"
            ]
        ]
    },
    {
        "id": "0d2b6f8fdef36412",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 260,
        "wires": [
            [
                "719398a1101e10a8"
            ]
        ]
    },
    {
        "id": "3276fc96e9bf15cb",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 260,
        "wires": [
            [
                "9d071d7cb23bcc41"
            ]
        ]
    },
    {
        "id": "47d81f40da4847df",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 320,
        "wires": [
            [
                "d31ed0740d22278f"
            ]
        ]
    },
    {
        "id": "719398a1101e10a8",
        "type": "link out",
        "z": "c63466f5ec185814",
        "name": "",
        "links": [
            "6cfddc52b5d4c4b8"
        ],
        "x": 1215,
        "y": 260,
        "wires": []
    },
    {
        "id": "cfd75843a74836b6",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 320,
        "wires": [
            [
                "cd0eca0806f20b06"
            ]
        ]
    },
    {
        "id": "cd0eca0806f20b06",
        "type": "link out",
        "z": "c63466f5ec185814",
        "name": "",
        "links": [
            "6cfddc52b5d4c4b8"
        ],
        "x": 1215,
        "y": 320,
        "wires": []
    },
    {
        "id": "838d7f4c9efdba79",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 280,
        "wires": [
            [
                "0d2b6f8fdef36412"
            ]
        ]
    },
    {
        "id": "e75d709f721c9b36",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 340,
        "wires": [
            [
                "cfd75843a74836b6"
            ]
        ]
    },
    {
        "id": "eade3366d6af4ee3",
        "type": "comment",
        "z": "c63466f5ec185814",
        "name": "without \"Authorization\" Header",
        "info": "",
        "x": 1470,
        "y": 40,
        "wires": []
    },
    {
        "id": "bdd32547213e7281",
        "type": "catch",
        "z": "c63466f5ec185814",
        "name": "",
        "scope": [
            "6bb1c98ab1473de2",
            "67a8d328d5042a44",
            "05ebc29c69196a84"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 120,
        "wires": [
            [
                "26c67805fd408a10"
            ]
        ]
    },
    {
        "id": "6bb1c98ab1473de2",
        "type": "http request",
        "z": "c63466f5ec185814",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 80,
        "wires": [
            [
                "67a8d328d5042a44"
            ]
        ]
    },
    {
        "id": "67a8d328d5042a44",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).to.match(/^Basic/)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 80,
        "wires": [
            [
                "26c67805fd408a10"
            ]
        ]
    },
    {
        "id": "ffb7f1e9279d78fa",
        "type": "comment",
        "z": "c63466f5ec185814",
        "name": "with wrong user",
        "info": "",
        "x": 1420,
        "y": 180,
        "wires": []
    },
    {
        "id": "b93f159ecb0e47e1",
        "type": "catch",
        "z": "c63466f5ec185814",
        "name": "",
        "scope": [
            "e53e6c722bf41f58",
            "c717663aab97c1bb",
            "487a95eb02215fe2"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 260,
        "wires": [
            [
                "7ec1dcedac567263"
            ]
        ]
    },
    {
        "id": "e53e6c722bf41f58",
        "type": "http request",
        "z": "c63466f5ec185814",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 220,
        "wires": [
            [
                "c717663aab97c1bb"
            ]
        ]
    },
    {
        "id": "c717663aab97c1bb",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).to.match(/^Basic/)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 220,
        "wires": [
            [
                "7ec1dcedac567263"
            ]
        ]
    },
    {
        "id": "3a621cf414958d96",
        "type": "comment",
        "z": "c63466f5ec185814",
        "name": "with wrong password",
        "info": "",
        "x": 1440,
        "y": 320,
        "wires": []
    },
    {
        "id": "3d0e0d6f4a72a1dd",
        "type": "catch",
        "z": "c63466f5ec185814",
        "name": "",
        "scope": [
            "e03212a07761194b",
            "fb3b8f29070fc1ae",
            "4566e76383eed2f4"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 400,
        "wires": [
            [
                "d37c51d6348268ea"
            ]
        ]
    },
    {
        "id": "e03212a07761194b",
        "type": "http request",
        "z": "c63466f5ec185814",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 360,
        "wires": [
            [
                "fb3b8f29070fc1ae"
            ]
        ]
    },
    {
        "id": "fb3b8f29070fc1ae",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).to.match(/^Basic/)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 360,
        "wires": [
            [
                "d37c51d6348268ea"
            ]
        ]
    },
    {
        "id": "5fbfb60a598a2e34",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 380,
        "wires": [
            [
                "18a32bab246f1254"
            ]
        ]
    },
    {
        "id": "86e9790e7e0a226f",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 380,
        "wires": [
            [
                "2809c8fb457377a8"
            ]
        ]
    },
    {
        "id": "2809c8fb457377a8",
        "type": "link out",
        "z": "c63466f5ec185814",
        "name": "",
        "links": [
            "6cfddc52b5d4c4b8"
        ],
        "x": 1215,
        "y": 380,
        "wires": []
    },
    {
        "id": "527d5c9430b5fa07",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 400,
        "wires": [
            [
                "86e9790e7e0a226f"
            ]
        ]
    },
    {
        "id": "25f7df04d333d659",
        "type": "comment",
        "z": "c63466f5ec185814",
        "name": "with correct credentials",
        "info": "",
        "x": 1440,
        "y": 460,
        "wires": []
    },
    {
        "id": "dfd54c0f017e8c76",
        "type": "catch",
        "z": "c63466f5ec185814",
        "name": "",
        "scope": [
            "8efa166f25ed9b27",
            "f20120e4430ccfac",
            "cf5f0b0891149cb3"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 540,
        "wires": [
            [
                "e933f1aee7673a50"
            ]
        ]
    },
    {
        "id": "8efa166f25ed9b27",
        "type": "http request",
        "z": "c63466f5ec185814",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 500,
        "wires": [
            [
                "f20120e4430ccfac"
            ]
        ]
    },
    {
        "id": "f20120e4430ccfac",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 500,
        "wires": [
            [
                "e933f1aee7673a50"
            ]
        ]
    },
    {
        "id": "d1f42c5e036f7b40",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 440,
        "wires": [
            [
                "a9260ba83be585c1"
            ]
        ]
    },
    {
        "id": "34220a51758993f0",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 440,
        "wires": [
            [
                "c738f18a0fbe68bb"
            ]
        ]
    },
    {
        "id": "c738f18a0fbe68bb",
        "type": "link out",
        "z": "c63466f5ec185814",
        "name": "",
        "links": [
            "6cfddc52b5d4c4b8"
        ],
        "x": 1215,
        "y": 440,
        "wires": []
    },
    {
        "id": "fa62de2849113833",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 460,
        "wires": [
            [
                "34220a51758993f0"
            ]
        ]
    },
    {
        "id": "c16254dad01ade88",
        "type": "change",
        "z": "c63466f5ec185814",
        "name": "configure",
        "rules": [
            {
                "t": "set",
                "p": "BasicAuthURL",
                "pt": "flow",
                "to": "http://127.0.0.1:1880/basic-auth",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 100,
        "wires": [
            [
                "b7c3ba944807c5f6"
            ]
        ]
    },
    {
        "id": "05ebc29c69196a84",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "arrange",
        "func": "msg.url = flow.get('BasicAuthURL')\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 80,
        "wires": [
            [
                "6bb1c98ab1473de2"
            ]
        ]
    },
    {
        "id": "487a95eb02215fe2",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "arrange",
        "func": "msg.url = flow.get('BasicAuthURL')\nmsg.headers = {\n  'Authorization':'Basic ' + new Buffer('wrong-user:wrong-password').toString('base64')\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 220,
        "wires": [
            [
                "e53e6c722bf41f58"
            ]
        ]
    },
    {
        "id": "4566e76383eed2f4",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "arrange",
        "func": "msg.url = flow.get('BasicAuthURL')\nmsg.headers = {\n  'Authorization':'Basic ' + new Buffer('node-red:wrong-password').toString('base64')\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 360,
        "wires": [
            [
                "e03212a07761194b"
            ]
        ]
    },
    {
        "id": "cf5f0b0891149cb3",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "arrange",
        "func": "msg.url = flow.get('BasicAuthURL')\nmsg.headers = {\n  'Authorization':'Basic ' + new Buffer('node-red:t0pS3cr3t!').toString('base64')\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 500,
        "wires": [
            [
                "8efa166f25ed9b27"
            ]
        ]
    },
    {
        "id": "75d9706e0f6872b3",
        "type": "reusable-in",
        "z": "c63466f5ec185814",
        "name": "#1",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 80,
        "wires": [
            [
                "05ebc29c69196a84"
            ]
        ]
    },
    {
        "id": "256120679cba411f",
        "type": "reusable-in",
        "z": "c63466f5ec185814",
        "name": "#2",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 220,
        "wires": [
            [
                "487a95eb02215fe2"
            ]
        ]
    },
    {
        "id": "6fd9c424bb02a8b6",
        "type": "reusable-in",
        "z": "c63466f5ec185814",
        "name": "#3",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 360,
        "wires": [
            [
                "4566e76383eed2f4"
            ]
        ]
    },
    {
        "id": "dd71050ac1762d6c",
        "type": "reusable-in",
        "z": "c63466f5ec185814",
        "name": "#4",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 500,
        "wires": [
            [
                "cf5f0b0891149cb3"
            ]
        ]
    },
    {
        "id": "26c67805fd408a10",
        "type": "reusable-out",
        "z": "c63466f5ec185814",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 120,
        "wires": []
    },
    {
        "id": "7ec1dcedac567263",
        "type": "reusable-out",
        "z": "c63466f5ec185814",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 260,
        "wires": []
    },
    {
        "id": "d37c51d6348268ea",
        "type": "reusable-out",
        "z": "c63466f5ec185814",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 400,
        "wires": []
    },
    {
        "id": "e933f1aee7673a50",
        "type": "reusable-out",
        "z": "c63466f5ec185814",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 540,
        "wires": []
    },
    {
        "id": "9d071d7cb23bcc41",
        "type": "reusable",
        "z": "c63466f5ec185814",
        "name": "",
        "target": "#1",
        "outputs": 1,
        "x": 890,
        "y": 260,
        "wires": [
            [
                "0d2b6f8fdef36412"
            ]
        ]
    },
    {
        "id": "d31ed0740d22278f",
        "type": "reusable",
        "z": "c63466f5ec185814",
        "name": "",
        "target": "#2",
        "outputs": 1,
        "x": 890,
        "y": 320,
        "wires": [
            [
                "cfd75843a74836b6"
            ]
        ]
    },
    {
        "id": "18a32bab246f1254",
        "type": "reusable",
        "z": "c63466f5ec185814",
        "name": "",
        "target": "#3",
        "outputs": 1,
        "x": 890,
        "y": 380,
        "wires": [
            [
                "86e9790e7e0a226f"
            ]
        ]
    },
    {
        "id": "a9260ba83be585c1",
        "type": "reusable",
        "z": "c63466f5ec185814",
        "name": "",
        "target": "#4",
        "outputs": 1,
        "x": 890,
        "y": 440,
        "wires": [
            [
                "34220a51758993f0"
            ]
        ]
    },
    {
        "id": "70fbfe2a9d26b3bb",
        "type": "comment",
        "z": "c63466f5ec185814",
        "name": "with wrong required role",
        "info": "",
        "x": 1450,
        "y": 600,
        "wires": []
    },
    {
        "id": "123ed89335430627",
        "type": "catch",
        "z": "c63466f5ec185814",
        "name": "",
        "scope": [
            "0e3109a76cc134b0",
            "c65f042631093f76",
            "697a022d759fcf6b"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 680,
        "wires": [
            [
                "0eb16b54f4ef1917"
            ]
        ]
    },
    {
        "id": "0e3109a76cc134b0",
        "type": "http request",
        "z": "c63466f5ec185814",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 640,
        "wires": [
            [
                "c65f042631093f76"
            ]
        ]
    },
    {
        "id": "c65f042631093f76",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 640,
        "wires": [
            [
                "0eb16b54f4ef1917"
            ]
        ]
    },
    {
        "id": "697a022d759fcf6b",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "arrange",
        "func": "msg.url = flow.get('BasicAuthURL')\nmsg.headers = {\n  'Authorization':'Basic ' + new Buffer('node-red:t0pS3cr3t!').toString('base64')\n}\nmsg.requiredRole = 'God'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 640,
        "wires": [
            [
                "0e3109a76cc134b0"
            ]
        ]
    },
    {
        "id": "e4f102b18cc69ea0",
        "type": "reusable-in",
        "z": "c63466f5ec185814",
        "name": "#5",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 640,
        "wires": [
            [
                "697a022d759fcf6b"
            ]
        ]
    },
    {
        "id": "0eb16b54f4ef1917",
        "type": "reusable-out",
        "z": "c63466f5ec185814",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 680,
        "wires": []
    },
    {
        "id": "8319561f7ee6fb8f",
        "type": "comment",
        "z": "c63466f5ec185814",
        "name": "with proper required role",
        "info": "",
        "x": 1450,
        "y": 740,
        "wires": []
    },
    {
        "id": "7a0d9907e5c2f6e2",
        "type": "catch",
        "z": "c63466f5ec185814",
        "name": "",
        "scope": [
            "6dba4d1d977ffc0f",
            "e79cd624e4e89a0b",
            "cd2ee1779c55bb51"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 820,
        "wires": [
            [
                "2999e1b8a877d718"
            ]
        ]
    },
    {
        "id": "6dba4d1d977ffc0f",
        "type": "http request",
        "z": "c63466f5ec185814",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 780,
        "wires": [
            [
                "e79cd624e4e89a0b"
            ]
        ]
    },
    {
        "id": "e79cd624e4e89a0b",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 780,
        "wires": [
            [
                "2999e1b8a877d718"
            ]
        ]
    },
    {
        "id": "cd2ee1779c55bb51",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "arrange",
        "func": "msg.url = flow.get('BasicAuthURL')\nmsg.headers = {\n  'Authorization':'Basic ' + new Buffer('node-red:t0pS3cr3t!').toString('base64')\n}\nmsg.requiredRole = 'node-red'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 780,
        "wires": [
            [
                "6dba4d1d977ffc0f"
            ]
        ]
    },
    {
        "id": "22a75c582e1343eb",
        "type": "reusable-in",
        "z": "c63466f5ec185814",
        "name": "#6",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 780,
        "wires": [
            [
                "cd2ee1779c55bb51"
            ]
        ]
    },
    {
        "id": "2999e1b8a877d718",
        "type": "reusable-out",
        "z": "c63466f5ec185814",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 820,
        "wires": []
    },
    {
        "id": "10448f4fe186f980",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 500,
        "wires": [
            [
                "5c157261930bd73e"
            ]
        ]
    },
    {
        "id": "364e867933f64fb1",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 500,
        "wires": [
            [
                "0a2f3530f2a1b79e"
            ]
        ]
    },
    {
        "id": "0a2f3530f2a1b79e",
        "type": "link out",
        "z": "c63466f5ec185814",
        "name": "",
        "links": [
            "6cfddc52b5d4c4b8"
        ],
        "x": 1215,
        "y": 500,
        "wires": []
    },
    {
        "id": "ecd3c130094051e1",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 520,
        "wires": [
            [
                "364e867933f64fb1"
            ]
        ]
    },
    {
        "id": "5c157261930bd73e",
        "type": "reusable",
        "z": "c63466f5ec185814",
        "name": "",
        "target": "#5",
        "outputs": 1,
        "x": 890,
        "y": 500,
        "wires": [
            [
                "364e867933f64fb1"
            ]
        ]
    },
    {
        "id": "def57dd927c85f9e",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 560,
        "wires": [
            [
                "a7696e80a60cf34d"
            ]
        ]
    },
    {
        "id": "cdedf2857b1dea68",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 560,
        "wires": [
            [
                "b57693fcd0b44601"
            ]
        ]
    },
    {
        "id": "b57693fcd0b44601",
        "type": "link out",
        "z": "c63466f5ec185814",
        "name": "",
        "links": [
            "6cfddc52b5d4c4b8"
        ],
        "x": 1215,
        "y": 560,
        "wires": []
    },
    {
        "id": "dcf8846557fd4293",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 580,
        "wires": [
            [
                "cdedf2857b1dea68"
            ]
        ]
    },
    {
        "id": "a7696e80a60cf34d",
        "type": "reusable",
        "z": "c63466f5ec185814",
        "name": "",
        "target": "#6",
        "outputs": 1,
        "x": 890,
        "y": 560,
        "wires": [
            [
                "cdedf2857b1dea68"
            ]
        ]
    }
]