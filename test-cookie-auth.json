[
    {
        "id": "e2ed2db643ffcf44",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "automated tests for Cookie-based authorization",
        "info": "",
        "x": 860,
        "y": 40,
        "wires": []
    },
    {
        "id": "1870c01bc60f6fd5",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with missing form",
        "info": "",
        "x": 780,
        "y": 760,
        "wires": []
    },
    {
        "id": "42bd1733bf77028c",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with incomplete form",
        "info": "",
        "x": 790,
        "y": 900,
        "wires": []
    },
    {
        "id": "5b4e6ecd71e21dd2",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with wrong password",
        "info": "",
        "x": 790,
        "y": 1180,
        "wires": []
    },
    {
        "id": "e8a50816f62af1bc",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with wrong userid",
        "info": "",
        "x": 780,
        "y": 1040,
        "wires": []
    },
    {
        "id": "4c7ae289169a0b90",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with correct credentials",
        "info": "",
        "x": 800,
        "y": 1320,
        "wires": []
    },
    {
        "id": "36e64808b6f3d12a",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get without cookie",
        "info": "",
        "x": 1430,
        "y": 860,
        "wires": []
    },
    {
        "id": "17d13eeb7d92cd76",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with broken cookie",
        "info": "",
        "x": 1440,
        "y": 1000,
        "wires": []
    },
    {
        "id": "263421297552b38b",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with modified userid",
        "info": "",
        "x": 1440,
        "y": 1140,
        "wires": []
    },
    {
        "id": "27ccfa39d8fde1c0",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with modified expiration",
        "info": "",
        "x": 1460,
        "y": 1280,
        "wires": []
    },
    {
        "id": "f6beafe82b09641b",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with modified digest",
        "info": "",
        "x": 1440,
        "y": 1420,
        "wires": []
    },
    {
        "id": "bd7806dd86783adc",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with correct cookie",
        "info": "",
        "x": 1440,
        "y": 1560,
        "wires": []
    },
    {
        "id": "80bdb1b0bdd799d3",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "run Tests",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 760,
        "y": 100,
        "wires": [
            [
                "c58d90340c889e28"
            ]
        ]
    },
    {
        "id": "4e734f9e68348f66",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "reset totals",
        "func": "flow.set('Totals',0)\n\nmsg.TestMode = '-'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 100,
        "wires": [
            [
                "9c9b95bf36f767bf",
                "4d3082de9478cc35"
            ]
        ]
    },
    {
        "id": "9c9b95bf36f767bf",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "Status",
        "func": "switch (true) {\n  case (msg.TestMode === '-'):\n    node.status({})\n    break\n  case (flow.get('Totals') === 0):\n    node.status({fill:'green',shape:'dot',text:'ok'})\n    break\n  default:\n    node.status({fill:'red',shape:'dot',text:'failed'})\n}\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 140,
        "wires": []
    },
    {
        "id": "4d3082de9478cc35",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "dispatch",
        "func": "if (context.get('pendingList') == null) { // first invocation\n  msg.TestMode = 'multiple-tests'\n\n  let MsgList = [null], pendingList = []\n  for (let i = 1, l = node.outputCount; i < l; i++) {\n    MsgList.push(null)\n    pendingList.push(i)\n  }\n  context.set('MsgList',MsgList)\n  context.set('pendingList',pendingList)\n}\n\nlet pendingList = context.get('pendingList')\nif (pendingList.length === 0) { // all tests completed\n  context.set('pendingList',null)\n  return [msg]\n} else { // ongoing tests\n  let msg = {} // create new, empty \"msg\" object\n\n  let chosenIndex  = Math.floor(Math.random()*pendingList.length)\n  let chosenOutput = pendingList.splice(chosenIndex,1)[0]\n\n  context.set('pendingList',pendingList)\n\n  let MsgList = context.get('MsgList').slice()\n    MsgList[chosenOutput] = msg\n  return MsgList\n}\n",
        "outputs": 8,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 200,
        "wires": [
            [
                "543356fecf5d905b"
            ],
            [
                "1f06d4da5995363a"
            ],
            [
                "0b291e967e75a4bf"
            ],
            [
                "9beb26c8bacae4e5"
            ],
            [
                "64a2f89fdcb0c6d2"
            ],
            [
                "49cbdee6db551f0e"
            ],
            [
                "36fea15947b5427e"
            ],
            [
                "0d1271974df2256a"
            ]
        ]
    },
    {
        "id": "aa33746daeeb21fd",
        "type": "link in",
        "z": "015583ed4bc63617",
        "name": "Cookie-based Authorization I",
        "links": [
            "7248c26bb4ff2e50",
            "dd506c9113e62946",
            "0145dcef454f355e",
            "1676257a0c77130c",
            "90ac1dbe3c644626",
            "821f8fe7965b8c3b",
            "d3eab2ae57f18501",
            "48d002695bd621a8"
        ],
        "x": 695,
        "y": 200,
        "wires": [
            [
                "4d3082de9478cc35"
            ]
        ]
    },
    {
        "id": "c58d90340c889e28",
        "type": "change",
        "z": "015583ed4bc63617",
        "name": "configure",
        "rules": [
            {
                "t": "set",
                "p": "CookieAuthURL",
                "pt": "flow",
                "to": "http://127.0.0.1:1880/cookie-auth",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 100,
        "wires": [
            [
                "4e734f9e68348f66"
            ]
        ]
    },
    {
        "id": "55c3960c6ae46765",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 300,
        "wires": [
            [
                "0145dcef454f355e"
            ]
        ]
    },
    {
        "id": "6b49832fb16d0be8",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 300,
        "wires": [
            [
                "1f06d4da5995363a"
            ]
        ]
    },
    {
        "id": "0145dcef454f355e",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "aa33746daeeb21fd",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 300,
        "wires": []
    },
    {
        "id": "2decad56e9ed4e03",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 320,
        "wires": [
            [
                "55c3960c6ae46765"
            ]
        ]
    },
    {
        "id": "7eb1e83289535ec2",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 360,
        "wires": [
            [
                "7248c26bb4ff2e50"
            ]
        ]
    },
    {
        "id": "d57a4efeab2c9d55",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 360,
        "wires": [
            [
                "0b291e967e75a4bf"
            ]
        ]
    },
    {
        "id": "7248c26bb4ff2e50",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "aa33746daeeb21fd",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 360,
        "wires": []
    },
    {
        "id": "32398f7f00aa812e",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 380,
        "wires": [
            [
                "7eb1e83289535ec2"
            ]
        ]
    },
    {
        "id": "a991e843ad99bc69",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 420,
        "wires": [
            [
                "dd506c9113e62946"
            ]
        ]
    },
    {
        "id": "5f15a13c255acc76",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 420,
        "wires": [
            [
                "9beb26c8bacae4e5"
            ]
        ]
    },
    {
        "id": "dd506c9113e62946",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "aa33746daeeb21fd",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 420,
        "wires": []
    },
    {
        "id": "8d0dbc994844459a",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 440,
        "wires": [
            [
                "a991e843ad99bc69"
            ]
        ]
    },
    {
        "id": "badc3ca1d82161f7",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 480,
        "wires": [
            [
                "90ac1dbe3c644626"
            ]
        ]
    },
    {
        "id": "6cc18f9cab68a153",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 480,
        "wires": [
            [
                "64a2f89fdcb0c6d2"
            ]
        ]
    },
    {
        "id": "90ac1dbe3c644626",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "aa33746daeeb21fd",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 480,
        "wires": []
    },
    {
        "id": "51b7b00c9f7c3a51",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "badc3ca1d82161f7"
            ]
        ]
    },
    {
        "id": "be5c9fec57ac6619",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 540,
        "wires": [
            [
                "1676257a0c77130c"
            ]
        ]
    },
    {
        "id": "f3d40fc2db7b3ca7",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 540,
        "wires": [
            [
                "49cbdee6db551f0e"
            ]
        ]
    },
    {
        "id": "1676257a0c77130c",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "aa33746daeeb21fd",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 540,
        "wires": []
    },
    {
        "id": "4d2550d669fc36db",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 560,
        "wires": [
            [
                "be5c9fec57ac6619"
            ]
        ]
    },
    {
        "id": "429725ac5da437de",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "dispatch",
        "func": "if (context.get('pendingList') == null) { // first invocation\n  msg.TestMode = 'multiple-tests'\n\n  let MsgList = [null], pendingList = []\n  for (let i = 1, l = node.outputCount; i < l; i++) {\n    MsgList.push(null)\n    pendingList.push(i)\n  }\n  context.set('MsgList',MsgList)\n  context.set('pendingList',pendingList)\n}\n\nlet pendingList = context.get('pendingList')\nif (pendingList.length === 0) { // all tests completed\n  context.set('pendingList',null)\n  return [msg]\n} else { // ongoing tests\n  let msg = {} // create new, empty \"msg\" object\n\n  let chosenIndex  = Math.floor(Math.random()*pendingList.length)\n  let chosenOutput = pendingList.splice(chosenIndex,1)[0]\n\n  context.set('pendingList',pendingList)\n\n  let MsgList = context.get('MsgList').slice()\n    MsgList[chosenOutput] = msg\n  return MsgList\n}\n",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 240,
        "wires": [
            [
                "10af8529fd343b2c"
            ],
            [
                "f93e92bd15790b40"
            ],
            [
                "a51bfb89a7f80f53"
            ],
            [
                "d40b8816b7048144"
            ],
            [
                "6aed3081c1f3326a"
            ],
            [
                "f07de025634f02d5"
            ],
            [
                "2ee8a65ca92b3f96"
            ],
            [
                "54f6469a32157038"
            ],
            [
                "41cf3f3f61af8822"
            ]
        ]
    },
    {
        "id": "8a89c1e76e09799f",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "login properly",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 140,
        "wires": [
            [
                "4c2e5e47a19e1713"
            ]
        ]
    },
    {
        "id": "b63ec62c49435a43",
        "type": "link in",
        "z": "015583ed4bc63617",
        "name": "Cookie-based Authorization II",
        "links": [
            "b2cc93c537fe1919",
            "5e9f19060fbc03f6",
            "256e5a87ca6c2f9b",
            "51328c45e8b2bafc",
            "1cebf739eb9cf1f9",
            "c7bae3a661914f9e",
            "a8ac5e966095a242",
            "fa86240c0feef220"
        ],
        "x": 1355,
        "y": 240,
        "wires": [
            [
                "429725ac5da437de"
            ]
        ]
    },
    {
        "id": "db52fd7e6aaa0978",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 340,
        "wires": [
            [
                "b2cc93c537fe1919"
            ]
        ]
    },
    {
        "id": "a4931027e2fc4664",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 340,
        "wires": [
            [
                "f93e92bd15790b40"
            ]
        ]
    },
    {
        "id": "b2cc93c537fe1919",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "b63ec62c49435a43"
        ],
        "x": 1875,
        "y": 340,
        "wires": []
    },
    {
        "id": "d35f954e022958b5",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 360,
        "wires": [
            [
                "db52fd7e6aaa0978"
            ]
        ]
    },
    {
        "id": "276da383229cec63",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 400,
        "wires": [
            [
                "5e9f19060fbc03f6"
            ]
        ]
    },
    {
        "id": "bb721eb8204dad3d",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 400,
        "wires": [
            [
                "a51bfb89a7f80f53"
            ]
        ]
    },
    {
        "id": "5e9f19060fbc03f6",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "b63ec62c49435a43"
        ],
        "x": 1875,
        "y": 400,
        "wires": []
    },
    {
        "id": "591f80bd5cea3230",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 420,
        "wires": [
            [
                "276da383229cec63"
            ]
        ]
    },
    {
        "id": "a73e43cb3123d992",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 460,
        "wires": [
            [
                "256e5a87ca6c2f9b"
            ]
        ]
    },
    {
        "id": "b238800f047eed24",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 460,
        "wires": [
            [
                "d40b8816b7048144"
            ]
        ]
    },
    {
        "id": "256e5a87ca6c2f9b",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "b63ec62c49435a43"
        ],
        "x": 1875,
        "y": 460,
        "wires": []
    },
    {
        "id": "21ce2c8a62b2f837",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 480,
        "wires": [
            [
                "a73e43cb3123d992"
            ]
        ]
    },
    {
        "id": "48055eaea2e75bae",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 520,
        "wires": [
            [
                "51328c45e8b2bafc"
            ]
        ]
    },
    {
        "id": "c7f9c9ee3a92382d",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 520,
        "wires": [
            [
                "6aed3081c1f3326a"
            ]
        ]
    },
    {
        "id": "51328c45e8b2bafc",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "b63ec62c49435a43"
        ],
        "x": 1875,
        "y": 520,
        "wires": []
    },
    {
        "id": "2703a0948e664352",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 540,
        "wires": [
            [
                "48055eaea2e75bae"
            ]
        ]
    },
    {
        "id": "fb5347a14ae0f2d2",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 580,
        "wires": [
            [
                "1cebf739eb9cf1f9"
            ]
        ]
    },
    {
        "id": "c34351eb6510f42c",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 580,
        "wires": [
            [
                "f07de025634f02d5"
            ]
        ]
    },
    {
        "id": "1cebf739eb9cf1f9",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "b63ec62c49435a43"
        ],
        "x": 1875,
        "y": 580,
        "wires": []
    },
    {
        "id": "d57eaee3af2a9a08",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 600,
        "wires": [
            [
                "fb5347a14ae0f2d2"
            ]
        ]
    },
    {
        "id": "49b6d617a4e1ee6f",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 640,
        "wires": [
            [
                "c7bae3a661914f9e"
            ]
        ]
    },
    {
        "id": "1fdfefc07c47d1e9",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 640,
        "wires": [
            [
                "2ee8a65ca92b3f96"
            ]
        ]
    },
    {
        "id": "c7bae3a661914f9e",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "b63ec62c49435a43"
        ],
        "x": 1875,
        "y": 640,
        "wires": []
    },
    {
        "id": "52c120662e8fbe86",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 660,
        "wires": [
            [
                "49b6d617a4e1ee6f"
            ]
        ]
    },
    {
        "id": "4d9790c46758b422",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "a1c7a6e0c9188510",
            "026f8494d583ef8c",
            "065902e194168a56"
        ],
        "uncaught": false,
        "x": 850,
        "y": 840,
        "wires": [
            [
                "762f22c5fd64beb4"
            ]
        ]
    },
    {
        "id": "a1c7a6e0c9188510",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 800,
        "wires": [
            [
                "026f8494d583ef8c"
            ]
        ]
    },
    {
        "id": "026f8494d583ef8c",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 800,
        "wires": [
            [
                "762f22c5fd64beb4"
            ]
        ]
    },
    {
        "id": "065902e194168a56",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = undefined // no form at all\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 800,
        "wires": [
            [
                "a1c7a6e0c9188510"
            ]
        ]
    },
    {
        "id": "94bc8c3bc8f29752",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "3f33cb0003624cc9",
            "250e1eb86c854f9f",
            "82cdaabf147e06c7"
        ],
        "uncaught": false,
        "x": 850,
        "y": 980,
        "wires": [
            [
                "5e1d5a6c0d83382b"
            ]
        ]
    },
    {
        "id": "3f33cb0003624cc9",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 940,
        "wires": [
            [
                "250e1eb86c854f9f"
            ]
        ]
    },
    {
        "id": "250e1eb86c854f9f",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 940,
        "wires": [
            [
                "5e1d5a6c0d83382b"
            ]
        ]
    },
    {
        "id": "82cdaabf147e06c7",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'node-red'\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 940,
        "wires": [
            [
                "3f33cb0003624cc9"
            ]
        ]
    },
    {
        "id": "6374ea2f0109cf48",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "3d5b4bbe9503f4f3",
            "488d6c23bb14395d",
            "80243a0d4bcea769"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1120,
        "wires": [
            [
                "921cd233bea96477"
            ]
        ]
    },
    {
        "id": "3d5b4bbe9503f4f3",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1080,
        "wires": [
            [
                "488d6c23bb14395d"
            ]
        ]
    },
    {
        "id": "488d6c23bb14395d",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1080,
        "wires": [
            [
                "921cd233bea96477"
            ]
        ]
    },
    {
        "id": "80243a0d4bcea769",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'invalid-user',\n  Password:'t0pS3cr3t!'\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1080,
        "wires": [
            [
                "3d5b4bbe9503f4f3"
            ]
        ]
    },
    {
        "id": "b0601942b3c37c75",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "f64ff57ac0b8f3dc",
            "1a5143de3fd6e9e0",
            "8ee31506a173f9e2"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1260,
        "wires": [
            [
                "90bb7922e52ce18c"
            ]
        ]
    },
    {
        "id": "f64ff57ac0b8f3dc",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1220,
        "wires": [
            [
                "1a5143de3fd6e9e0"
            ]
        ]
    },
    {
        "id": "1a5143de3fd6e9e0",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1220,
        "wires": [
            [
                "90bb7922e52ce18c"
            ]
        ]
    },
    {
        "id": "8ee31506a173f9e2",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'node-red',\n  Password:'invalid-password'\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1220,
        "wires": [
            [
                "f64ff57ac0b8f3dc"
            ]
        ]
    },
    {
        "id": "bef80475e2180b8c",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "a1928a36e82d8d7b",
            "cbca52447b92fb23",
            "09cd9c02abeb5599"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1400,
        "wires": [
            [
                "edd0f19da898f21a"
            ]
        ]
    },
    {
        "id": "a1928a36e82d8d7b",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1360,
        "wires": [
            [
                "cbca52447b92fb23"
            ]
        ]
    },
    {
        "id": "cbca52447b92fb23",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\n\nlet Cookie = msg.responseCookies['authorization'].value\nexpect(Cookie).to.match(/^node-red:\\d+:[0-9a-f]+$/)\n\nlet [UserId,Expiration,Digest] = Cookie.split(':')\nexpect(UserId).to.equal('node-red')\nexpect(parseInt(Expiration,10)).to.be.at.least(msg.now)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1360,
        "wires": [
            [
                "edd0f19da898f21a"
            ]
        ]
    },
    {
        "id": "09cd9c02abeb5599",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1360,
        "wires": [
            [
                "a1928a36e82d8d7b"
            ]
        ]
    },
    {
        "id": "4c2e5e47a19e1713",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "http",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1590,
        "y": 140,
        "wires": [
            [
                "2997580ee26d4a53"
            ]
        ]
    },
    {
        "id": "2997580ee26d4a53",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\n\nlet Cookie = msg.responseCookies['authorization'].value\nexpect(Cookie).to.match(/^node-red:\\d+:[0-9a-f]+$/)\n\nlet [UserId,Expiration,Digest] = Cookie.split(':')\nexpect(UserId).to.equal('node-red')\nexpect(parseInt(Expiration,10)).to.be.at.least(msg.now)\n\nflow.set('CookieAuthCookie',Cookie)\n\nif (msg.TestMode !== 'single-test') {\n  return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1710,
        "y": 140,
        "wires": [
            [
                "429725ac5da437de"
            ]
        ]
    },
    {
        "id": "f41d6fdf088994b7",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "4c2e5e47a19e1713",
            "2997580ee26d4a53",
            "8a89c1e76e09799f"
        ],
        "uncaught": false,
        "x": 1670,
        "y": 180,
        "wires": [
            [
                "67d045fab9a53157"
            ]
        ]
    },
    {
        "id": "67d045fab9a53157",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({})\n  } else {\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 180,
        "wires": [
            [
                "821f8fe7965b8c3b"
            ]
        ]
    },
    {
        "id": "821f8fe7965b8c3b",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "aa33746daeeb21fd",
            "a2d05779d9af1600"
        ],
        "x": 1875,
        "y": 180,
        "wires": []
    },
    {
        "id": "405ab5b98b0c5443",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "fbc90b833ecfdf4a",
            "6eddacdabd81e709",
            "9f4a8f84b339091f"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 940,
        "wires": [
            [
                "84ec9b625768374f"
            ]
        ]
    },
    {
        "id": "fbc90b833ecfdf4a",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 900,
        "wires": [
            [
                "6eddacdabd81e709"
            ]
        ]
    },
    {
        "id": "6eddacdabd81e709",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 900,
        "wires": [
            [
                "84ec9b625768374f"
            ]
        ]
    },
    {
        "id": "9f4a8f84b339091f",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.cookies = {} // no cookie at all\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 900,
        "wires": [
            [
                "fbc90b833ecfdf4a"
            ]
        ]
    },
    {
        "id": "bb49a1d4ff91fefb",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "e4d783700e6c821f",
            "214b8c7202f53342",
            "27fda013b5eb2e67"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1080,
        "wires": [
            [
                "b70b4c1245c2ba58"
            ]
        ]
    },
    {
        "id": "e4d783700e6c821f",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1040,
        "wires": [
            [
                "214b8c7202f53342"
            ]
        ]
    },
    {
        "id": "214b8c7202f53342",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1040,
        "wires": [
            [
                "b70b4c1245c2ba58"
            ]
        ]
    },
    {
        "id": "27fda013b5eb2e67",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.cookies = { authorization:': : : : : : : broken-cookie' }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1040,
        "wires": [
            [
                "e4d783700e6c821f"
            ]
        ]
    },
    {
        "id": "2923d653d427ed16",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "be3d9baa81cff4ce",
            "ddc9849689155788",
            "0c0a49c15a7217c3"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1220,
        "wires": [
            [
                "ba6041c852836aaf"
            ]
        ]
    },
    {
        "id": "be3d9baa81cff4ce",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1180,
        "wires": [
            [
                "ddc9849689155788"
            ]
        ]
    },
    {
        "id": "ddc9849689155788",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1180,
        "wires": [
            [
                "ba6041c852836aaf"
            ]
        ]
    },
    {
        "id": "0c0a49c15a7217c3",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('CookieAuthURL')\n\nlet Cookie = flow.get('CookieAuthCookie')\nlet [UserId,Expiration,Digest] = Cookie.split(':')\n\nUserId = 'node-green'\n\nmsg.cookies = { authorization:UserId + ':' + Expiration + ':' + Digest }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1180,
        "wires": [
            [
                "be3d9baa81cff4ce"
            ]
        ]
    },
    {
        "id": "213c33e0e7038057",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 100,
        "wires": [
            [
                "8a89c1e76e09799f"
            ]
        ]
    },
    {
        "id": "824c503434b87aa4",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "0510c59757a18020",
            "94090b40fd7c7ec4",
            "d4eb0ceb2fe9fde6"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1360,
        "wires": [
            [
                "b109f5479541e607"
            ]
        ]
    },
    {
        "id": "0510c59757a18020",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1320,
        "wires": [
            [
                "94090b40fd7c7ec4"
            ]
        ]
    },
    {
        "id": "94090b40fd7c7ec4",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1320,
        "wires": [
            [
                "b109f5479541e607"
            ]
        ]
    },
    {
        "id": "d4eb0ceb2fe9fde6",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('CookieAuthURL')\n\nlet Cookie = flow.get('CookieAuthCookie')\nlet [UserId,Expiration,Digest] = Cookie.split(':')\n\nExpiration = parseInt(Expiration,10) + 365*24*60*60*1000\n\nmsg.cookies = { authorization:UserId + ':' + Expiration + ':' + Digest }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1320,
        "wires": [
            [
                "0510c59757a18020"
            ]
        ]
    },
    {
        "id": "e5a8118edba62667",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "9c7fd882ae345a44",
            "84cef62828c53a81",
            "908222ea83eff08f"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1500,
        "wires": [
            [
                "09d259a1f043cf0a"
            ]
        ]
    },
    {
        "id": "9c7fd882ae345a44",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1460,
        "wires": [
            [
                "84cef62828c53a81"
            ]
        ]
    },
    {
        "id": "84cef62828c53a81",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1460,
        "wires": [
            [
                "09d259a1f043cf0a"
            ]
        ]
    },
    {
        "id": "908222ea83eff08f",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('CookieAuthURL')\n\nlet Cookie = flow.get('CookieAuthCookie')\nlet [UserId,Expiration,Digest] = Cookie.split(':')\n\nDigest = 'c3da5c194d3104f6ff5986cd79cc3dada0bc14447330c7da0eb8299091188d7b'\n\nmsg.cookies = { authorization:UserId + ':' + Expiration + ':' + Digest }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1460,
        "wires": [
            [
                "9c7fd882ae345a44"
            ]
        ]
    },
    {
        "id": "0b8717250ea749dd",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "ef18afd11c2cbf96",
            "42254e3b7419dfa0",
            "dd9909ac3c79a74b"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1640,
        "wires": [
            [
                "e7ea99153907e916"
            ]
        ]
    },
    {
        "id": "ef18afd11c2cbf96",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1600,
        "wires": [
            [
                "42254e3b7419dfa0"
            ]
        ]
    },
    {
        "id": "42254e3b7419dfa0",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\n\nlet newCookie = msg.responseCookies['authorization'].value\nexpect(newCookie).to.match(/^node-red:\\d+:[0-9a-f]+$/)\n\nlet [newUserId,newExpiration,newDigest] = newCookie.split(':')\n\nlet oldCookie = flow.get('CookieAuthCookie')\nlet [oldUserId,oldExpiration,oldDigest] = oldCookie.split(':')\n\nexpect(newUserId).to.equal(oldUserId)\nexpect(parseInt(newExpiration,10)).to.be.at.least(parseInt(oldExpiration,10))\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1600,
        "wires": [
            [
                "e7ea99153907e916"
            ]
        ]
    },
    {
        "id": "dd9909ac3c79a74b",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('CookieAuthURL')\n\nlet Cookie = flow.get('CookieAuthCookie')\n\nmsg.cookies = { authorization:Cookie }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1600,
        "wires": [
            [
                "ef18afd11c2cbf96"
            ]
        ]
    },
    {
        "id": "762f22c5fd64beb4",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 840,
        "wires": []
    },
    {
        "id": "5e1d5a6c0d83382b",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 980,
        "wires": []
    },
    {
        "id": "921cd233bea96477",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1120,
        "wires": []
    },
    {
        "id": "90bb7922e52ce18c",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1260,
        "wires": []
    },
    {
        "id": "edd0f19da898f21a",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1400,
        "wires": []
    },
    {
        "id": "e7ea99153907e916",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1640,
        "wires": []
    },
    {
        "id": "09d259a1f043cf0a",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1500,
        "wires": []
    },
    {
        "id": "b109f5479541e607",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1360,
        "wires": []
    },
    {
        "id": "ba6041c852836aaf",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1220,
        "wires": []
    },
    {
        "id": "b70b4c1245c2ba58",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1080,
        "wires": []
    },
    {
        "id": "84ec9b625768374f",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 940,
        "wires": []
    },
    {
        "id": "0e1c611c39fb47c1",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#1",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 800,
        "wires": [
            [
                "065902e194168a56"
            ]
        ]
    },
    {
        "id": "dabaafa304fd4de8",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#2",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 940,
        "wires": [
            [
                "82cdaabf147e06c7"
            ]
        ]
    },
    {
        "id": "b5f5366247e516be",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#3",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1080,
        "wires": [
            [
                "80243a0d4bcea769"
            ]
        ]
    },
    {
        "id": "66d235efdc4c0aa5",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#4",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1220,
        "wires": [
            [
                "8ee31506a173f9e2"
            ]
        ]
    },
    {
        "id": "f3c872514815caa7",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#5",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1360,
        "wires": [
            [
                "09cd9c02abeb5599"
            ]
        ]
    },
    {
        "id": "d0963e3033d0afb4",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#13",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1600,
        "wires": [
            [
                "dd9909ac3c79a74b"
            ]
        ]
    },
    {
        "id": "3d2e9586261f4ee6",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#12",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1460,
        "wires": [
            [
                "908222ea83eff08f"
            ]
        ]
    },
    {
        "id": "cb49ac21e347dcc0",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#11",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1320,
        "wires": [
            [
                "d4eb0ceb2fe9fde6"
            ]
        ]
    },
    {
        "id": "c8e10c50c23b4234",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#10",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1180,
        "wires": [
            [
                "0c0a49c15a7217c3"
            ]
        ]
    },
    {
        "id": "f5cc61721de9c163",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#9",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1040,
        "wires": [
            [
                "27fda013b5eb2e67"
            ]
        ]
    },
    {
        "id": "23f31082c8cea56a",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#8",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 900,
        "wires": [
            [
                "9f4a8f84b339091f"
            ]
        ]
    },
    {
        "id": "1f06d4da5995363a",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#1",
        "outputs": 1,
        "x": 870,
        "y": 300,
        "wires": [
            [
                "55c3960c6ae46765"
            ]
        ]
    },
    {
        "id": "0b291e967e75a4bf",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#2",
        "outputs": 1,
        "x": 870,
        "y": 360,
        "wires": [
            [
                "7eb1e83289535ec2"
            ]
        ]
    },
    {
        "id": "9beb26c8bacae4e5",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#3",
        "outputs": 1,
        "x": 870,
        "y": 420,
        "wires": [
            [
                "a991e843ad99bc69"
            ]
        ]
    },
    {
        "id": "64a2f89fdcb0c6d2",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#4",
        "outputs": 1,
        "x": 870,
        "y": 480,
        "wires": [
            [
                "badc3ca1d82161f7"
            ]
        ]
    },
    {
        "id": "49cbdee6db551f0e",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#5",
        "outputs": 1,
        "x": 870,
        "y": 540,
        "wires": [
            [
                "be5c9fec57ac6619"
            ]
        ]
    },
    {
        "id": "f93e92bd15790b40",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#8",
        "outputs": 1,
        "x": 1530,
        "y": 340,
        "wires": [
            [
                "db52fd7e6aaa0978"
            ]
        ]
    },
    {
        "id": "a51bfb89a7f80f53",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#9",
        "outputs": 1,
        "x": 1530,
        "y": 400,
        "wires": [
            [
                "276da383229cec63"
            ]
        ]
    },
    {
        "id": "d40b8816b7048144",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#10",
        "outputs": 1,
        "x": 1530,
        "y": 460,
        "wires": [
            [
                "a73e43cb3123d992"
            ]
        ]
    },
    {
        "id": "6aed3081c1f3326a",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#11",
        "outputs": 1,
        "x": 1530,
        "y": 520,
        "wires": [
            [
                "48055eaea2e75bae"
            ]
        ]
    },
    {
        "id": "f07de025634f02d5",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#12",
        "outputs": 1,
        "x": 1530,
        "y": 580,
        "wires": [
            [
                "fb5347a14ae0f2d2"
            ]
        ]
    },
    {
        "id": "2ee8a65ca92b3f96",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#13",
        "outputs": 1,
        "x": 1530,
        "y": 640,
        "wires": [
            [
                "49b6d617a4e1ee6f"
            ]
        ]
    },
    {
        "id": "05138ab15281094c",
        "type": "link in",
        "z": "015583ed4bc63617",
        "name": "2nd batch of automated tests",
        "links": [
            "543356fecf5d905b"
        ],
        "x": 1535,
        "y": 100,
        "wires": [
            [
                "8a89c1e76e09799f"
            ]
        ]
    },
    {
        "id": "543356fecf5d905b",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "05138ab15281094c"
        ],
        "x": 935,
        "y": 160,
        "wires": []
    },
    {
        "id": "9a0b5aee3e16f598",
        "type": "link in",
        "z": "015583ed4bc63617",
        "name": "finish automated tests",
        "links": [
            "10af8529fd343b2c"
        ],
        "x": 1055,
        "y": 160,
        "wires": [
            [
                "9c9b95bf36f767bf"
            ]
        ]
    },
    {
        "id": "10af8529fd343b2c",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "9a0b5aee3e16f598"
        ],
        "x": 1635,
        "y": 240,
        "wires": []
    },
    {
        "id": "d01f87bbc7b16c1c",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 600,
        "wires": [
            [
                "d3eab2ae57f18501"
            ]
        ]
    },
    {
        "id": "f4a55acd99a51c5e",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 600,
        "wires": [
            [
                "36fea15947b5427e"
            ]
        ]
    },
    {
        "id": "d3eab2ae57f18501",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "aa33746daeeb21fd",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 600,
        "wires": []
    },
    {
        "id": "b8c6261e388d7d29",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 620,
        "wires": [
            [
                "d01f87bbc7b16c1c"
            ]
        ]
    },
    {
        "id": "36fea15947b5427e",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#6",
        "outputs": 1,
        "x": 870,
        "y": 600,
        "wires": [
            [
                "d01f87bbc7b16c1c"
            ]
        ]
    },
    {
        "id": "8c6effd6967f170a",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 660,
        "wires": [
            [
                "48d002695bd621a8"
            ]
        ]
    },
    {
        "id": "00deee4759150579",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 660,
        "wires": [
            [
                "0d1271974df2256a"
            ]
        ]
    },
    {
        "id": "48d002695bd621a8",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "aa33746daeeb21fd",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 660,
        "wires": []
    },
    {
        "id": "3bdaad798f24c785",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "8c6effd6967f170a"
            ]
        ]
    },
    {
        "id": "0d1271974df2256a",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#7",
        "outputs": 1,
        "x": 870,
        "y": 660,
        "wires": [
            [
                "8c6effd6967f170a"
            ]
        ]
    },
    {
        "id": "e9b3eb89b6e34efa",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with wrong required role",
        "info": "",
        "x": 800,
        "y": 1460,
        "wires": []
    },
    {
        "id": "b4189606ace1d650",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "login with correct required role",
        "info": "",
        "x": 800,
        "y": 1600,
        "wires": []
    },
    {
        "id": "1c4f486b330d8645",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "d240e95a8d6ac7ea",
            "22069b3d11e012ff",
            "f4d385411374234f"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1540,
        "wires": [
            [
                "3d9e34a9433a81e8"
            ]
        ]
    },
    {
        "id": "d240e95a8d6ac7ea",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1500,
        "wires": [
            [
                "22069b3d11e012ff"
            ]
        ]
    },
    {
        "id": "22069b3d11e012ff",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1500,
        "wires": [
            [
                "3d9e34a9433a81e8"
            ]
        ]
    },
    {
        "id": "f4d385411374234f",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL') + '-2'\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1500,
        "wires": [
            [
                "d240e95a8d6ac7ea"
            ]
        ]
    },
    {
        "id": "6dc8b31ed2acea74",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "8da572382a4112a9",
            "26c207d7635e14b2",
            "a440b7738c0e4d29"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1680,
        "wires": [
            [
                "8653db65eb131ec6"
            ]
        ]
    },
    {
        "id": "8da572382a4112a9",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1640,
        "wires": [
            [
                "26c207d7635e14b2"
            ]
        ]
    },
    {
        "id": "26c207d7635e14b2",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\n\nlet Cookie = msg.responseCookies['authorization'].value\nexpect(Cookie).to.match(/^node-red:\\d+:[0-9a-f]+$/)\n\nlet [UserId,Expiration,Digest] = Cookie.split(':')\nexpect(UserId).to.equal('node-red')\nexpect(parseInt(Expiration,10)).to.be.at.least(msg.now)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1640,
        "wires": [
            [
                "8653db65eb131ec6"
            ]
        ]
    },
    {
        "id": "a440b7738c0e4d29",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL') + '-3'\nmsg.headers = { 'Content-Type':'application/x-www-form-urlencoded' }\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1640,
        "wires": [
            [
                "8da572382a4112a9"
            ]
        ]
    },
    {
        "id": "3d9e34a9433a81e8",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1540,
        "wires": []
    },
    {
        "id": "8653db65eb131ec6",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1680,
        "wires": []
    },
    {
        "id": "4797c86fec30def9",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#6",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1500,
        "wires": [
            [
                "f4d385411374234f"
            ]
        ]
    },
    {
        "id": "e51d3b585e043147",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#7",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1640,
        "wires": [
            [
                "a440b7738c0e4d29"
            ]
        ]
    },
    {
        "id": "7b54c263c50573a3",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 700,
        "wires": [
            [
                "a8ac5e966095a242"
            ]
        ]
    },
    {
        "id": "2d6158cc273f7276",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 700,
        "wires": [
            [
                "54f6469a32157038"
            ]
        ]
    },
    {
        "id": "a8ac5e966095a242",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "b63ec62c49435a43"
        ],
        "x": 1875,
        "y": 700,
        "wires": []
    },
    {
        "id": "15b5bed74c07365e",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 720,
        "wires": [
            [
                "7b54c263c50573a3"
            ]
        ]
    },
    {
        "id": "54f6469a32157038",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#14",
        "outputs": 1,
        "x": 1530,
        "y": 700,
        "wires": [
            [
                "7b54c263c50573a3"
            ]
        ]
    },
    {
        "id": "cbfec2a74bca49c8",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 760,
        "wires": [
            [
                "fa86240c0feef220"
            ]
        ]
    },
    {
        "id": "e7e827f34ac55b80",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 760,
        "wires": [
            [
                "41cf3f3f61af8822"
            ]
        ]
    },
    {
        "id": "fa86240c0feef220",
        "type": "link out",
        "z": "015583ed4bc63617",
        "name": "",
        "links": [
            "b63ec62c49435a43"
        ],
        "x": 1875,
        "y": 760,
        "wires": []
    },
    {
        "id": "cbbc24794da54552",
        "type": "inject",
        "z": "015583ed4bc63617",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 780,
        "wires": [
            [
                "cbfec2a74bca49c8"
            ]
        ]
    },
    {
        "id": "41cf3f3f61af8822",
        "type": "reusable",
        "z": "015583ed4bc63617",
        "name": "",
        "target": "#15",
        "outputs": 1,
        "x": 1530,
        "y": 760,
        "wires": [
            [
                "cbfec2a74bca49c8"
            ]
        ]
    },
    {
        "id": "f77d7fb7e5c862d9",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with wrong required role",
        "info": "",
        "x": 1460,
        "y": 1700,
        "wires": []
    },
    {
        "id": "6d7572d8b84251ac",
        "type": "comment",
        "z": "015583ed4bc63617",
        "name": "get with correct required role",
        "info": "",
        "x": 1460,
        "y": 1840,
        "wires": []
    },
    {
        "id": "7a8481756560f841",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "31d5f9ed61dd1f33",
            "cf317799c47f9284",
            "1e70a29edf416742"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1780,
        "wires": [
            [
                "c7d3b3290a62e26a"
            ]
        ]
    },
    {
        "id": "31d5f9ed61dd1f33",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1740,
        "wires": [
            [
                "cf317799c47f9284"
            ]
        ]
    },
    {
        "id": "cf317799c47f9284",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1740,
        "wires": [
            [
                "c7d3b3290a62e26a"
            ]
        ]
    },
    {
        "id": "1e70a29edf416742",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('CookieAuthURL') + '-2'\n\nlet Cookie = flow.get('CookieAuthCookie')\n\nmsg.cookies = { authorization:Cookie }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1740,
        "wires": [
            [
                "31d5f9ed61dd1f33"
            ]
        ]
    },
    {
        "id": "93b7042d61a26d35",
        "type": "catch",
        "z": "015583ed4bc63617",
        "name": "",
        "scope": [
            "1797ae28b16763d9",
            "5210367e5df888fc",
            "f6a5674d7096d552"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1920,
        "wires": [
            [
                "87d7c009ab7755c3"
            ]
        ]
    },
    {
        "id": "1797ae28b16763d9",
        "type": "http request",
        "z": "015583ed4bc63617",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1880,
        "wires": [
            [
                "5210367e5df888fc"
            ]
        ]
    },
    {
        "id": "5210367e5df888fc",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\n\nlet newCookie = msg.responseCookies['authorization'].value\nexpect(newCookie).to.match(/^node-red:\\d+:[0-9a-f]+$/)\n\nlet [newUserId,newExpiration,newDigest] = newCookie.split(':')\n\nlet oldCookie = flow.get('CookieAuthCookie')\nlet [oldUserId,oldExpiration,oldDigest] = oldCookie.split(':')\n\nexpect(newUserId).to.equal(oldUserId)\nexpect(parseInt(newExpiration,10)).to.be.at.least(parseInt(oldExpiration,10))\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1880,
        "wires": [
            [
                "87d7c009ab7755c3"
            ]
        ]
    },
    {
        "id": "f6a5674d7096d552",
        "type": "function",
        "z": "015583ed4bc63617",
        "name": "arrange",
        "func": "msg.url = flow.get('CookieAuthURL') + '-3'\n\nlet Cookie = flow.get('CookieAuthCookie')\n\nmsg.cookies = { authorization:Cookie }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1880,
        "wires": [
            [
                "1797ae28b16763d9"
            ]
        ]
    },
    {
        "id": "87d7c009ab7755c3",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1920,
        "wires": []
    },
    {
        "id": "c7d3b3290a62e26a",
        "type": "reusable-out",
        "z": "015583ed4bc63617",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1780,
        "wires": []
    },
    {
        "id": "051813439496ada8",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#15",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1880,
        "wires": [
            [
                "f6a5674d7096d552"
            ]
        ]
    },
    {
        "id": "f52933d75d29aa37",
        "type": "reusable-in",
        "z": "015583ed4bc63617",
        "name": "#14",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1740,
        "wires": [
            [
                "1e70a29edf416742"
            ]
        ]
    },
    {
        "id": "ec064d975c3f74fe",
        "type": "tls-config",
        "name": "local-server",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]