[
    {
        "id": "f9da2c1654a8bc8a",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "automated tests for Cookie-based authorization",
        "info": "",
        "x": 860,
        "y": 40,
        "wires": []
    },
    {
        "id": "afad3b2dd19864be",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "login with missing form",
        "info": "",
        "x": 780,
        "y": 760,
        "wires": []
    },
    {
        "id": "57acafb075691290",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "login with incomplete form",
        "info": "",
        "x": 790,
        "y": 900,
        "wires": []
    },
    {
        "id": "69c1d8520f4647b2",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "login with wrong password",
        "info": "",
        "x": 790,
        "y": 1180,
        "wires": []
    },
    {
        "id": "87c7a9ae9ade58d0",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "login with wrong userid",
        "info": "",
        "x": 780,
        "y": 1040,
        "wires": []
    },
    {
        "id": "eb9e283e07b7477a",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "login with correct credentials",
        "info": "",
        "x": 800,
        "y": 1320,
        "wires": []
    },
    {
        "id": "ecee54527d728425",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "get without cookie",
        "info": "",
        "x": 1430,
        "y": 860,
        "wires": []
    },
    {
        "id": "5d029b3ff5a489aa",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "get with broken cookie",
        "info": "",
        "x": 1440,
        "y": 1000,
        "wires": []
    },
    {
        "id": "7f31bf3d8bcf7880",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "get with modified userid",
        "info": "",
        "x": 1440,
        "y": 1140,
        "wires": []
    },
    {
        "id": "3b488eed03d7c47f",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "get with modified expiration",
        "info": "",
        "x": 1460,
        "y": 1280,
        "wires": []
    },
    {
        "id": "8d65fed7b20aaeb9",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "get with modified digest",
        "info": "",
        "x": 1440,
        "y": 1420,
        "wires": []
    },
    {
        "id": "201c9451ae13d89b",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "get with correct cookie",
        "info": "",
        "x": 1440,
        "y": 1560,
        "wires": []
    },
    {
        "id": "7b1f5e9f32f6ac2b",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "run Tests",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 760,
        "y": 100,
        "wires": [
            [
                "893d762fe8701158"
            ]
        ]
    },
    {
        "id": "4a900666226325c1",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "reset totals",
        "func": "flow.set('Totals',0)\n\nmsg.TestMode = '-'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 100,
        "wires": [
            [
                "9017b0386f76f5b4",
                "11d7dc62a995c10f"
            ]
        ]
    },
    {
        "id": "9017b0386f76f5b4",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "Status",
        "func": "switch (true) {\n  case (msg.TestMode === '-'):\n    node.status({})\n    break\n  case (flow.get('Totals') === 0):\n    node.status({fill:'green',shape:'dot',text:'ok'})\n    break\n  default:\n    node.status({fill:'red',shape:'dot',text:'failed'})\n}\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 140,
        "wires": []
    },
    {
        "id": "11d7dc62a995c10f",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "dispatch",
        "func": "if (context.get('pendingList') == null) { // first invocation\n  msg.TestMode = 'multiple-tests'\n\n  let MsgList = [null], pendingList = []\n  for (let i = 1, l = node.outputCount; i < l; i++) {\n    MsgList.push(null)\n    pendingList.push(i)\n  }\n  context.set('MsgList',MsgList)\n  context.set('pendingList',pendingList)\n}\n\nlet pendingList = context.get('pendingList')\nif (pendingList.length === 0) { // all tests completed\n  context.set('pendingList',null)\n  return [msg]\n} else { // ongoing tests\n  let msg = {} // create new, empty \"msg\" object\n\n  let chosenIndex  = Math.floor(Math.random()*pendingList.length)\n  let chosenOutput = pendingList.splice(chosenIndex,1)[0]\n\n  context.set('pendingList',pendingList)\n\n  let MsgList = context.get('MsgList').slice()\n    MsgList[chosenOutput] = msg\n  return MsgList\n}\n",
        "outputs": 8,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 200,
        "wires": [
            [
                "903ba1f12e9b11dc"
            ],
            [
                "7bc7dcdb3fd515d6"
            ],
            [
                "bf53d27c4783fc14"
            ],
            [
                "2db7493b14af6230"
            ],
            [
                "de96949220329a4d"
            ],
            [
                "8284635be68555f5"
            ],
            [
                "17d96a979d2af611"
            ],
            [
                "bd80ea523dec45d5"
            ]
        ]
    },
    {
        "id": "eb15d5a32a41e78f",
        "type": "link in",
        "z": "5cd3730f771ed2a6",
        "name": "Cookie-based Authorization I",
        "links": [
            "f4e5ebd344abd98d",
            "c03e8a9702a308b7",
            "6f98128b69b761cd",
            "863b31b350778e3d",
            "7166bd98f88802f9",
            "2c7b99466ec2eb1b",
            "179bbd366aeb501a",
            "44d0f43f6883b0ef"
        ],
        "x": 695,
        "y": 200,
        "wires": [
            [
                "11d7dc62a995c10f"
            ]
        ]
    },
    {
        "id": "893d762fe8701158",
        "type": "change",
        "z": "5cd3730f771ed2a6",
        "name": "configure",
        "rules": [
            {
                "t": "set",
                "p": "CookieAuthURL",
                "pt": "flow",
                "to": "http://127.0.0.1:1880/cookie-auth",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 100,
        "wires": [
            [
                "4a900666226325c1"
            ]
        ]
    },
    {
        "id": "445a8c690a91ee3d",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 300,
        "wires": [
            [
                "6f98128b69b761cd"
            ]
        ]
    },
    {
        "id": "d419eeeebd039fb5",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 300,
        "wires": [
            [
                "7bc7dcdb3fd515d6"
            ]
        ]
    },
    {
        "id": "6f98128b69b761cd",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "eb15d5a32a41e78f",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 300,
        "wires": []
    },
    {
        "id": "10de08e976b60aa8",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 320,
        "wires": [
            [
                "445a8c690a91ee3d"
            ]
        ]
    },
    {
        "id": "447b3974e291e16a",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 360,
        "wires": [
            [
                "f4e5ebd344abd98d"
            ]
        ]
    },
    {
        "id": "6f33b6eaf5b06a11",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 360,
        "wires": [
            [
                "bf53d27c4783fc14"
            ]
        ]
    },
    {
        "id": "f4e5ebd344abd98d",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "eb15d5a32a41e78f",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 360,
        "wires": []
    },
    {
        "id": "99425db6c0fb642c",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 380,
        "wires": [
            [
                "447b3974e291e16a"
            ]
        ]
    },
    {
        "id": "dbdc55d41106b31f",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 420,
        "wires": [
            [
                "c03e8a9702a308b7"
            ]
        ]
    },
    {
        "id": "8f6c120806d25881",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 420,
        "wires": [
            [
                "2db7493b14af6230"
            ]
        ]
    },
    {
        "id": "c03e8a9702a308b7",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "eb15d5a32a41e78f",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 420,
        "wires": []
    },
    {
        "id": "6987fe8b278de11f",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 440,
        "wires": [
            [
                "dbdc55d41106b31f"
            ]
        ]
    },
    {
        "id": "14912be381921b39",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 480,
        "wires": [
            [
                "7166bd98f88802f9"
            ]
        ]
    },
    {
        "id": "2e90822fd389b830",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 480,
        "wires": [
            [
                "de96949220329a4d"
            ]
        ]
    },
    {
        "id": "7166bd98f88802f9",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "eb15d5a32a41e78f",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 480,
        "wires": []
    },
    {
        "id": "e712e00412628ce9",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "14912be381921b39"
            ]
        ]
    },
    {
        "id": "a7dc985890e1a061",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 540,
        "wires": [
            [
                "863b31b350778e3d"
            ]
        ]
    },
    {
        "id": "50795d807d47746a",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 540,
        "wires": [
            [
                "8284635be68555f5"
            ]
        ]
    },
    {
        "id": "863b31b350778e3d",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "eb15d5a32a41e78f",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 540,
        "wires": []
    },
    {
        "id": "708b28f007b323b3",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 560,
        "wires": [
            [
                "a7dc985890e1a061"
            ]
        ]
    },
    {
        "id": "4ecf50405ebfcf66",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "dispatch",
        "func": "if (context.get('pendingList') == null) { // first invocation\n  msg.TestMode = 'multiple-tests'\n\n  let MsgList = [null], pendingList = []\n  for (let i = 1, l = node.outputCount; i < l; i++) {\n    MsgList.push(null)\n    pendingList.push(i)\n  }\n  context.set('MsgList',MsgList)\n  context.set('pendingList',pendingList)\n}\n\nlet pendingList = context.get('pendingList')\nif (pendingList.length === 0) { // all tests completed\n  context.set('pendingList',null)\n  return [msg]\n} else { // ongoing tests\n  let msg = {} // create new, empty \"msg\" object\n\n  let chosenIndex  = Math.floor(Math.random()*pendingList.length)\n  let chosenOutput = pendingList.splice(chosenIndex,1)[0]\n\n  context.set('pendingList',pendingList)\n\n  let MsgList = context.get('MsgList').slice()\n    MsgList[chosenOutput] = msg\n  return MsgList\n}\n",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 240,
        "wires": [
            [
                "e14cbe566e885031"
            ],
            [
                "287eed56e3e474f2"
            ],
            [
                "d02a44a6b1e8e5f6"
            ],
            [
                "1b050efc6e0a51a7"
            ],
            [
                "725ce37e36c1630e"
            ],
            [
                "b8f8e77aa273285f"
            ],
            [
                "4b34cefd70b6561f"
            ],
            [
                "5437bacc17e8e1bf"
            ],
            [
                "804c83924018da62"
            ]
        ]
    },
    {
        "id": "8213fd821b18a981",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "login properly",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 140,
        "wires": [
            [
                "c8c8f467b0773e68"
            ]
        ]
    },
    {
        "id": "f08991a4f7f415e5",
        "type": "link in",
        "z": "5cd3730f771ed2a6",
        "name": "Cookie-based Authorization II",
        "links": [
            "1ff71e8581ca6470",
            "e6be4a89e2aa1a31",
            "a0322dc60d504273",
            "948c2406318239a0",
            "4b52c525c46c52e7",
            "a578b4c7536094a2",
            "2251cf61d9c44e01",
            "9c876fb40fad35cc"
        ],
        "x": 1355,
        "y": 240,
        "wires": [
            [
                "4ecf50405ebfcf66"
            ]
        ]
    },
    {
        "id": "a9b88034ade79e03",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 340,
        "wires": [
            [
                "1ff71e8581ca6470"
            ]
        ]
    },
    {
        "id": "d7d9372fa0ee1311",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 340,
        "wires": [
            [
                "287eed56e3e474f2"
            ]
        ]
    },
    {
        "id": "1ff71e8581ca6470",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "f08991a4f7f415e5"
        ],
        "x": 1875,
        "y": 340,
        "wires": []
    },
    {
        "id": "db645e4c6c29eebe",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 360,
        "wires": [
            [
                "a9b88034ade79e03"
            ]
        ]
    },
    {
        "id": "6277aec4cf9450d7",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 400,
        "wires": [
            [
                "e6be4a89e2aa1a31"
            ]
        ]
    },
    {
        "id": "b80bdc21c95d266e",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 400,
        "wires": [
            [
                "d02a44a6b1e8e5f6"
            ]
        ]
    },
    {
        "id": "e6be4a89e2aa1a31",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "f08991a4f7f415e5"
        ],
        "x": 1875,
        "y": 400,
        "wires": []
    },
    {
        "id": "4a7a67ffd7af2e97",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 420,
        "wires": [
            [
                "6277aec4cf9450d7"
            ]
        ]
    },
    {
        "id": "86a97b97535aad80",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 460,
        "wires": [
            [
                "a0322dc60d504273"
            ]
        ]
    },
    {
        "id": "266ed148e89bd7d2",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 460,
        "wires": [
            [
                "1b050efc6e0a51a7"
            ]
        ]
    },
    {
        "id": "a0322dc60d504273",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "f08991a4f7f415e5"
        ],
        "x": 1875,
        "y": 460,
        "wires": []
    },
    {
        "id": "481d14775093cc2b",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 480,
        "wires": [
            [
                "86a97b97535aad80"
            ]
        ]
    },
    {
        "id": "568eba20f227f355",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 520,
        "wires": [
            [
                "948c2406318239a0"
            ]
        ]
    },
    {
        "id": "61c3172a1226ef2e",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 520,
        "wires": [
            [
                "725ce37e36c1630e"
            ]
        ]
    },
    {
        "id": "948c2406318239a0",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "f08991a4f7f415e5"
        ],
        "x": 1875,
        "y": 520,
        "wires": []
    },
    {
        "id": "02d082cfa97ff923",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 540,
        "wires": [
            [
                "568eba20f227f355"
            ]
        ]
    },
    {
        "id": "88b79d67e703c73d",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 580,
        "wires": [
            [
                "4b52c525c46c52e7"
            ]
        ]
    },
    {
        "id": "e77a81667e380b1c",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 580,
        "wires": [
            [
                "b8f8e77aa273285f"
            ]
        ]
    },
    {
        "id": "4b52c525c46c52e7",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "f08991a4f7f415e5"
        ],
        "x": 1875,
        "y": 580,
        "wires": []
    },
    {
        "id": "bbd9e7c6c6cab034",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 600,
        "wires": [
            [
                "88b79d67e703c73d"
            ]
        ]
    },
    {
        "id": "86e7379355a92e0d",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 640,
        "wires": [
            [
                "a578b4c7536094a2"
            ]
        ]
    },
    {
        "id": "fb4c73adad83fc90",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 640,
        "wires": [
            [
                "4b34cefd70b6561f"
            ]
        ]
    },
    {
        "id": "a578b4c7536094a2",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "f08991a4f7f415e5"
        ],
        "x": 1875,
        "y": 640,
        "wires": []
    },
    {
        "id": "5f5ca45ef35ecde3",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 660,
        "wires": [
            [
                "86e7379355a92e0d"
            ]
        ]
    },
    {
        "id": "e9fd54966a35cd9c",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "9f96d5dd507f2bf2",
            "c72110469b9e5e7c",
            "3c9d5aae3237a04c"
        ],
        "uncaught": false,
        "x": 850,
        "y": 840,
        "wires": [
            [
                "c5fd42490747fcf3"
            ]
        ]
    },
    {
        "id": "9f96d5dd507f2bf2",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 800,
        "wires": [
            [
                "c72110469b9e5e7c"
            ]
        ]
    },
    {
        "id": "c72110469b9e5e7c",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 800,
        "wires": [
            [
                "c5fd42490747fcf3"
            ]
        ]
    },
    {
        "id": "3c9d5aae3237a04c",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.payload = undefined // no form at all\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 800,
        "wires": [
            [
                "9f96d5dd507f2bf2"
            ]
        ]
    },
    {
        "id": "904155b136c30a17",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "669d92c806f33b26",
            "1ede45f6d5a7c369",
            "03e3389f3719ed96"
        ],
        "uncaught": false,
        "x": 850,
        "y": 980,
        "wires": [
            [
                "1a3aa6fcae1e23fe"
            ]
        ]
    },
    {
        "id": "669d92c806f33b26",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 940,
        "wires": [
            [
                "1ede45f6d5a7c369"
            ]
        ]
    },
    {
        "id": "1ede45f6d5a7c369",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 940,
        "wires": [
            [
                "1a3aa6fcae1e23fe"
            ]
        ]
    },
    {
        "id": "03e3389f3719ed96",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.payload = {\n  UserId:'node-red'\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 940,
        "wires": [
            [
                "669d92c806f33b26"
            ]
        ]
    },
    {
        "id": "354dd9ac2f11f3cb",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "5366f4f4610472ae",
            "9086d60704df4386",
            "5208ea3f17b7280a"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1120,
        "wires": [
            [
                "3eb10755deadbdae"
            ]
        ]
    },
    {
        "id": "5366f4f4610472ae",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1080,
        "wires": [
            [
                "9086d60704df4386"
            ]
        ]
    },
    {
        "id": "9086d60704df4386",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1080,
        "wires": [
            [
                "3eb10755deadbdae"
            ]
        ]
    },
    {
        "id": "5208ea3f17b7280a",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.payload = {\n  UserId:'invalid-user',\n  Password:'t0pS3cr3t!'\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1080,
        "wires": [
            [
                "5366f4f4610472ae"
            ]
        ]
    },
    {
        "id": "abdf95ebad237944",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "c8b4dc6522b27cb1",
            "6c20b20bfbad571b",
            "b7247ed34300b341"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1260,
        "wires": [
            [
                "ee7434881267123e"
            ]
        ]
    },
    {
        "id": "c8b4dc6522b27cb1",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1220,
        "wires": [
            [
                "6c20b20bfbad571b"
            ]
        ]
    },
    {
        "id": "6c20b20bfbad571b",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1220,
        "wires": [
            [
                "ee7434881267123e"
            ]
        ]
    },
    {
        "id": "b7247ed34300b341",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.payload = {\n  UserId:'node-red',\n  Password:'invalid-password'\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1220,
        "wires": [
            [
                "c8b4dc6522b27cb1"
            ]
        ]
    },
    {
        "id": "ace441a614bc40db",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "24b6753f56cd7875",
            "ebe00b0e79abd227",
            "58b17f41df58455a"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1400,
        "wires": [
            [
                "f648a7fca7513c65"
            ]
        ]
    },
    {
        "id": "24b6753f56cd7875",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1360,
        "wires": [
            [
                "ebe00b0e79abd227"
            ]
        ]
    },
    {
        "id": "ebe00b0e79abd227",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\n\nlet Cookie = msg.responseCookies['authorization'].value\nexpect(Cookie).to.match(/^node-red:\\d+:[0-9a-f]+$/)\n\nlet [UserId,Expiration,Digest] = Cookie.split(':')\nexpect(UserId).to.equal('node-red')\nexpect(parseInt(Expiration,10)).to.be.at.least(msg.now)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1360,
        "wires": [
            [
                "f648a7fca7513c65"
            ]
        ]
    },
    {
        "id": "58b17f41df58455a",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1360,
        "wires": [
            [
                "24b6753f56cd7875"
            ]
        ]
    },
    {
        "id": "c8c8f467b0773e68",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "http",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "ec064d975c3f74fe",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1590,
        "y": 140,
        "wires": [
            [
                "8a463a3cf96c6220"
            ]
        ]
    },
    {
        "id": "8a463a3cf96c6220",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\n\nlet Cookie = msg.responseCookies['authorization'].value\nexpect(Cookie).to.match(/^node-red:\\d+:[0-9a-f]+$/)\n\nlet [UserId,Expiration,Digest] = Cookie.split(':')\nexpect(UserId).to.equal('node-red')\nexpect(parseInt(Expiration,10)).to.be.at.least(msg.now)\n\nflow.set('CookieAuthCookie',Cookie)\n\nif (msg.TestMode !== 'single-test') {\n  return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1710,
        "y": 140,
        "wires": [
            [
                "4ecf50405ebfcf66"
            ]
        ]
    },
    {
        "id": "bc1b41a949a3209a",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "c8c8f467b0773e68",
            "8a463a3cf96c6220",
            "8213fd821b18a981"
        ],
        "uncaught": false,
        "x": 1670,
        "y": 180,
        "wires": [
            [
                "62bdbcf8a2d2ed02"
            ]
        ]
    },
    {
        "id": "62bdbcf8a2d2ed02",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({})\n  } else {\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 180,
        "wires": [
            [
                "2c7b99466ec2eb1b"
            ]
        ]
    },
    {
        "id": "2c7b99466ec2eb1b",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "eb15d5a32a41e78f",
            "a2d05779d9af1600"
        ],
        "x": 1875,
        "y": 180,
        "wires": []
    },
    {
        "id": "eeaa83ea1c5a0ff3",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "274660d2cf5ae0e6",
            "256c5fcd79132a99",
            "35c3fc05271e5023"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 940,
        "wires": [
            [
                "95b94a93f5e58ecd"
            ]
        ]
    },
    {
        "id": "274660d2cf5ae0e6",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 900,
        "wires": [
            [
                "256c5fcd79132a99"
            ]
        ]
    },
    {
        "id": "256c5fcd79132a99",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 900,
        "wires": [
            [
                "95b94a93f5e58ecd"
            ]
        ]
    },
    {
        "id": "35c3fc05271e5023",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.cookies = {} // no cookie at all\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 900,
        "wires": [
            [
                "274660d2cf5ae0e6"
            ]
        ]
    },
    {
        "id": "3c2d83a635286785",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "124651c25462ae16",
            "5a579467923e7485",
            "48a571dd64dc4ba5"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1080,
        "wires": [
            [
                "6d8ff6eddb3713f7"
            ]
        ]
    },
    {
        "id": "124651c25462ae16",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1040,
        "wires": [
            [
                "5a579467923e7485"
            ]
        ]
    },
    {
        "id": "5a579467923e7485",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1040,
        "wires": [
            [
                "6d8ff6eddb3713f7"
            ]
        ]
    },
    {
        "id": "48a571dd64dc4ba5",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL')\nmsg.cookies = { authorization:': : : : : : : broken-cookie' }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1040,
        "wires": [
            [
                "124651c25462ae16"
            ]
        ]
    },
    {
        "id": "19f8bc7e8ed6671e",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "0e62a4f59f995931",
            "3ccb21c0a4cb08a6",
            "6c47b02b4a1cb2ce"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1220,
        "wires": [
            [
                "2ae99422fc7bb037"
            ]
        ]
    },
    {
        "id": "0e62a4f59f995931",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1180,
        "wires": [
            [
                "3ccb21c0a4cb08a6"
            ]
        ]
    },
    {
        "id": "3ccb21c0a4cb08a6",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1180,
        "wires": [
            [
                "2ae99422fc7bb037"
            ]
        ]
    },
    {
        "id": "6c47b02b4a1cb2ce",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url = flow.get('CookieAuthURL')\n\nlet Cookie = flow.get('CookieAuthCookie')\nlet [UserId,Expiration,Digest] = Cookie.split(':')\n\nUserId = 'node-green'\n\nmsg.cookies = { authorization:UserId + ':' + Expiration + ':' + Digest }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1180,
        "wires": [
            [
                "0e62a4f59f995931"
            ]
        ]
    },
    {
        "id": "5a6183e34bfcd3be",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 100,
        "wires": [
            [
                "8213fd821b18a981"
            ]
        ]
    },
    {
        "id": "fdce8b4a07e31356",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "bfac33a999e5ea8c",
            "bcc2341b109df1db",
            "6f87ae45bd6a9969"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1360,
        "wires": [
            [
                "9cfba1fab24bd968"
            ]
        ]
    },
    {
        "id": "bfac33a999e5ea8c",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1320,
        "wires": [
            [
                "bcc2341b109df1db"
            ]
        ]
    },
    {
        "id": "bcc2341b109df1db",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1320,
        "wires": [
            [
                "9cfba1fab24bd968"
            ]
        ]
    },
    {
        "id": "6f87ae45bd6a9969",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url = flow.get('CookieAuthURL')\n\nlet Cookie = flow.get('CookieAuthCookie')\nlet [UserId,Expiration,Digest] = Cookie.split(':')\n\nExpiration = parseInt(Expiration,10) + 365*24*60*60*1000\n\nmsg.cookies = { authorization:UserId + ':' + Expiration + ':' + Digest }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1320,
        "wires": [
            [
                "bfac33a999e5ea8c"
            ]
        ]
    },
    {
        "id": "3ae9818048003e51",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "ab2792cd43ee2b5c",
            "7c3fa3d2e0d2751f",
            "c0cb9968bf9299c6"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1500,
        "wires": [
            [
                "47439bca893b2a98"
            ]
        ]
    },
    {
        "id": "ab2792cd43ee2b5c",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1460,
        "wires": [
            [
                "7c3fa3d2e0d2751f"
            ]
        ]
    },
    {
        "id": "7c3fa3d2e0d2751f",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1460,
        "wires": [
            [
                "47439bca893b2a98"
            ]
        ]
    },
    {
        "id": "c0cb9968bf9299c6",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url = flow.get('CookieAuthURL')\n\nlet Cookie = flow.get('CookieAuthCookie')\nlet [UserId,Expiration,Digest] = Cookie.split(':')\n\nDigest = 'c3da5c194d3104f6ff5986cd79cc3dada0bc14447330c7da0eb8299091188d7b'\n\nmsg.cookies = { authorization:UserId + ':' + Expiration + ':' + Digest }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1460,
        "wires": [
            [
                "ab2792cd43ee2b5c"
            ]
        ]
    },
    {
        "id": "2480ae9bf72b4af5",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "e42c9a13406f2b8e",
            "49905471619a8c43",
            "514a7161745e457b"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1640,
        "wires": [
            [
                "506c7c8143bebf5e"
            ]
        ]
    },
    {
        "id": "e42c9a13406f2b8e",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1600,
        "wires": [
            [
                "49905471619a8c43"
            ]
        ]
    },
    {
        "id": "49905471619a8c43",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\n\nlet newCookie = msg.responseCookies['authorization'].value\nexpect(newCookie).to.match(/^node-red:\\d+:[0-9a-f]+$/)\n\nlet [newUserId,newExpiration,newDigest] = newCookie.split(':')\n\nlet oldCookie = flow.get('CookieAuthCookie')\nlet [oldUserId,oldExpiration,oldDigest] = oldCookie.split(':')\n\nexpect(newUserId).to.equal(oldUserId)\nexpect(parseInt(newExpiration,10)).to.be.at.least(parseInt(oldExpiration,10))\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1600,
        "wires": [
            [
                "506c7c8143bebf5e"
            ]
        ]
    },
    {
        "id": "514a7161745e457b",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url = flow.get('CookieAuthURL')\n\nlet Cookie = flow.get('CookieAuthCookie')\n\nmsg.cookies = { authorization:Cookie }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1600,
        "wires": [
            [
                "e42c9a13406f2b8e"
            ]
        ]
    },
    {
        "id": "c5fd42490747fcf3",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 840,
        "wires": []
    },
    {
        "id": "1a3aa6fcae1e23fe",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 980,
        "wires": []
    },
    {
        "id": "3eb10755deadbdae",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1120,
        "wires": []
    },
    {
        "id": "ee7434881267123e",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1260,
        "wires": []
    },
    {
        "id": "f648a7fca7513c65",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1400,
        "wires": []
    },
    {
        "id": "506c7c8143bebf5e",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1640,
        "wires": []
    },
    {
        "id": "47439bca893b2a98",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1500,
        "wires": []
    },
    {
        "id": "9cfba1fab24bd968",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1360,
        "wires": []
    },
    {
        "id": "2ae99422fc7bb037",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1220,
        "wires": []
    },
    {
        "id": "6d8ff6eddb3713f7",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1080,
        "wires": []
    },
    {
        "id": "95b94a93f5e58ecd",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 940,
        "wires": []
    },
    {
        "id": "fa740b5631164a52",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#1",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 800,
        "wires": [
            [
                "3c9d5aae3237a04c"
            ]
        ]
    },
    {
        "id": "8dafe089770b6e36",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#2",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 940,
        "wires": [
            [
                "03e3389f3719ed96"
            ]
        ]
    },
    {
        "id": "07c67522199a2665",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#3",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1080,
        "wires": [
            [
                "5208ea3f17b7280a"
            ]
        ]
    },
    {
        "id": "ef3ea37e072b60aa",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#4",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1220,
        "wires": [
            [
                "b7247ed34300b341"
            ]
        ]
    },
    {
        "id": "4040642560c50ac8",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#5",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1360,
        "wires": [
            [
                "58b17f41df58455a"
            ]
        ]
    },
    {
        "id": "bc9dc2dca3220839",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#13",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1600,
        "wires": [
            [
                "514a7161745e457b"
            ]
        ]
    },
    {
        "id": "9fc451dccf2d2ab1",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#12",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1460,
        "wires": [
            [
                "c0cb9968bf9299c6"
            ]
        ]
    },
    {
        "id": "8a1245e611601f96",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#11",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1320,
        "wires": [
            [
                "6f87ae45bd6a9969"
            ]
        ]
    },
    {
        "id": "f3211d1b6716a8e6",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#10",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1180,
        "wires": [
            [
                "6c47b02b4a1cb2ce"
            ]
        ]
    },
    {
        "id": "d3f24bfe48152653",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#9",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1040,
        "wires": [
            [
                "48a571dd64dc4ba5"
            ]
        ]
    },
    {
        "id": "e191f0f975943d26",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#8",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 900,
        "wires": [
            [
                "35c3fc05271e5023"
            ]
        ]
    },
    {
        "id": "7bc7dcdb3fd515d6",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#1",
        "outputs": 1,
        "x": 870,
        "y": 300,
        "wires": [
            [
                "445a8c690a91ee3d"
            ]
        ]
    },
    {
        "id": "bf53d27c4783fc14",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#2",
        "outputs": 1,
        "x": 870,
        "y": 360,
        "wires": [
            [
                "447b3974e291e16a"
            ]
        ]
    },
    {
        "id": "2db7493b14af6230",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#3",
        "outputs": 1,
        "x": 870,
        "y": 420,
        "wires": [
            [
                "dbdc55d41106b31f"
            ]
        ]
    },
    {
        "id": "de96949220329a4d",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#4",
        "outputs": 1,
        "x": 870,
        "y": 480,
        "wires": [
            [
                "14912be381921b39"
            ]
        ]
    },
    {
        "id": "8284635be68555f5",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#5",
        "outputs": 1,
        "x": 870,
        "y": 540,
        "wires": [
            [
                "a7dc985890e1a061"
            ]
        ]
    },
    {
        "id": "287eed56e3e474f2",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#8",
        "outputs": 1,
        "x": 1530,
        "y": 340,
        "wires": [
            [
                "a9b88034ade79e03"
            ]
        ]
    },
    {
        "id": "d02a44a6b1e8e5f6",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#9",
        "outputs": 1,
        "x": 1530,
        "y": 400,
        "wires": [
            [
                "6277aec4cf9450d7"
            ]
        ]
    },
    {
        "id": "1b050efc6e0a51a7",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#10",
        "outputs": 1,
        "x": 1530,
        "y": 460,
        "wires": [
            [
                "86a97b97535aad80"
            ]
        ]
    },
    {
        "id": "725ce37e36c1630e",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#11",
        "outputs": 1,
        "x": 1530,
        "y": 520,
        "wires": [
            [
                "568eba20f227f355"
            ]
        ]
    },
    {
        "id": "b8f8e77aa273285f",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#12",
        "outputs": 1,
        "x": 1530,
        "y": 580,
        "wires": [
            [
                "88b79d67e703c73d"
            ]
        ]
    },
    {
        "id": "4b34cefd70b6561f",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#13",
        "outputs": 1,
        "x": 1530,
        "y": 640,
        "wires": [
            [
                "86e7379355a92e0d"
            ]
        ]
    },
    {
        "id": "4f36a5d9d15ee050",
        "type": "link in",
        "z": "5cd3730f771ed2a6",
        "name": "2nd batch of automated tests",
        "links": [
            "903ba1f12e9b11dc"
        ],
        "x": 1535,
        "y": 100,
        "wires": [
            [
                "8213fd821b18a981"
            ]
        ]
    },
    {
        "id": "903ba1f12e9b11dc",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "4f36a5d9d15ee050"
        ],
        "x": 935,
        "y": 160,
        "wires": []
    },
    {
        "id": "c023da75cd3cf0bd",
        "type": "link in",
        "z": "5cd3730f771ed2a6",
        "name": "finish automated tests",
        "links": [
            "e14cbe566e885031"
        ],
        "x": 1055,
        "y": 160,
        "wires": [
            [
                "9017b0386f76f5b4"
            ]
        ]
    },
    {
        "id": "e14cbe566e885031",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "c023da75cd3cf0bd"
        ],
        "x": 1635,
        "y": 240,
        "wires": []
    },
    {
        "id": "6f46bc08bc77a338",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 600,
        "wires": [
            [
                "179bbd366aeb501a"
            ]
        ]
    },
    {
        "id": "07ffc331350347cd",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 600,
        "wires": [
            [
                "17d96a979d2af611"
            ]
        ]
    },
    {
        "id": "179bbd366aeb501a",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "eb15d5a32a41e78f",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 600,
        "wires": []
    },
    {
        "id": "306e1324aa90f62a",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 620,
        "wires": [
            [
                "6f46bc08bc77a338"
            ]
        ]
    },
    {
        "id": "17d96a979d2af611",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#6",
        "outputs": 1,
        "x": 870,
        "y": 600,
        "wires": [
            [
                "6f46bc08bc77a338"
            ]
        ]
    },
    {
        "id": "75d3bc26cc1ad96e",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 660,
        "wires": [
            [
                "44d0f43f6883b0ef"
            ]
        ]
    },
    {
        "id": "b689b0cf495ea7bc",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 750,
        "y": 660,
        "wires": [
            [
                "bd80ea523dec45d5"
            ]
        ]
    },
    {
        "id": "44d0f43f6883b0ef",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "eb15d5a32a41e78f",
            "a2d05779d9af1600"
        ],
        "x": 1215,
        "y": 660,
        "wires": []
    },
    {
        "id": "ddb874ac99d80e62",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "75d3bc26cc1ad96e"
            ]
        ]
    },
    {
        "id": "bd80ea523dec45d5",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#7",
        "outputs": 1,
        "x": 870,
        "y": 660,
        "wires": [
            [
                "75d3bc26cc1ad96e"
            ]
        ]
    },
    {
        "id": "82e3ab8cbf8eb7bd",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "login with wrong required role",
        "info": "",
        "x": 800,
        "y": 1460,
        "wires": []
    },
    {
        "id": "350b0759db9419df",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "login with correct required role",
        "info": "",
        "x": 800,
        "y": 1600,
        "wires": []
    },
    {
        "id": "7ad0dbcd91441243",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "e480f3df712002a4",
            "d37a89ccbc1b4c7e",
            "f4415233670ed659"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1540,
        "wires": [
            [
                "0440dc5f62717c74"
            ]
        ]
    },
    {
        "id": "e480f3df712002a4",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1500,
        "wires": [
            [
                "d37a89ccbc1b4c7e"
            ]
        ]
    },
    {
        "id": "d37a89ccbc1b4c7e",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1500,
        "wires": [
            [
                "0440dc5f62717c74"
            ]
        ]
    },
    {
        "id": "f4415233670ed659",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL') + '-2'\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1500,
        "wires": [
            [
                "e480f3df712002a4"
            ]
        ]
    },
    {
        "id": "8eb13f53e6a815ff",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "141760c6fa197152",
            "0f2bca3b1d84b8d7",
            "ea970a3d633d903a"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1680,
        "wires": [
            [
                "49423bd547a1ca25"
            ]
        ]
    },
    {
        "id": "141760c6fa197152",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 990,
        "y": 1640,
        "wires": [
            [
                "0f2bca3b1d84b8d7"
            ]
        ]
    },
    {
        "id": "0f2bca3b1d84b8d7",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\n\nlet Cookie = msg.responseCookies['authorization'].value\nexpect(Cookie).to.match(/^node-red:\\d+:[0-9a-f]+$/)\n\nlet [UserId,Expiration,Digest] = Cookie.split(':')\nexpect(UserId).to.equal('node-red')\nexpect(parseInt(Expiration,10)).to.be.at.least(msg.now)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1110,
        "y": 1640,
        "wires": [
            [
                "49423bd547a1ca25"
            ]
        ]
    },
    {
        "id": "ea970a3d633d903a",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url     = flow.get('CookieAuthURL') + '-3'\nmsg.payload = {\n  UserId:'node-red',\n  Password:'t0pS3cr3t!'\n}\n\nmsg.now = Date.now()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1640,
        "wires": [
            [
                "141760c6fa197152"
            ]
        ]
    },
    {
        "id": "0440dc5f62717c74",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1540,
        "wires": []
    },
    {
        "id": "49423bd547a1ca25",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1190,
        "y": 1680,
        "wires": []
    },
    {
        "id": "28fc1448af393b74",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#6",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1500,
        "wires": [
            [
                "f4415233670ed659"
            ]
        ]
    },
    {
        "id": "5cd4b332102b75f2",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#7",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 730,
        "y": 1640,
        "wires": [
            [
                "ea970a3d633d903a"
            ]
        ]
    },
    {
        "id": "0cd1a0ceb2755d30",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 700,
        "wires": [
            [
                "2251cf61d9c44e01"
            ]
        ]
    },
    {
        "id": "4a17ed63fe1b89e8",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 700,
        "wires": [
            [
                "5437bacc17e8e1bf"
            ]
        ]
    },
    {
        "id": "2251cf61d9c44e01",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "f08991a4f7f415e5"
        ],
        "x": 1875,
        "y": 700,
        "wires": []
    },
    {
        "id": "b2b0ed1c1903c921",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 720,
        "wires": [
            [
                "0cd1a0ceb2755d30"
            ]
        ]
    },
    {
        "id": "5437bacc17e8e1bf",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#14",
        "outputs": 1,
        "x": 1530,
        "y": 700,
        "wires": [
            [
                "0cd1a0ceb2755d30"
            ]
        ]
    },
    {
        "id": "f081d30d9d7ac971",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "report",
        "func": "if (msg.TestMode === 'show-error') {\n  node.error(context.get('failed-msg') || '(no failure)')\n//return msg // do NOT pass injected message\n} else {\n  if (msg.error == null) {\n    context.set('failed-msg',null)\n    node.status({fill:'green',shape:'dot',text:'ok'})\n  } else {\n    let failedMsg = Object.assign({},RED.util.cloneMessage(msg))\n    context.set('failed-msg',failedMsg)\n    node.status({fill:'red',shape:'dot',text:'failed'})\n    \n    let Totals = flow.get('Totals')\n    flow.set('Totals', typeof Totals === 'number' ? Totals + 1 : 1)\n  }\n  \n  if (msg.TestMode === 'single-test') {\n    return null\n  } else {\n    return msg\n  }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 760,
        "wires": [
            [
                "9c876fb40fad35cc"
            ]
        ]
    },
    {
        "id": "a1b72930a3009eee",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": " test",
        "props": [
            {
                "p": "TestMode",
                "v": "single-test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1410,
        "y": 760,
        "wires": [
            [
                "804c83924018da62"
            ]
        ]
    },
    {
        "id": "9c876fb40fad35cc",
        "type": "link out",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "links": [
            "f08991a4f7f415e5"
        ],
        "x": 1875,
        "y": 760,
        "wires": []
    },
    {
        "id": "a02e270ad8e044ab",
        "type": "inject",
        "z": "5cd3730f771ed2a6",
        "name": "show",
        "props": [
            {
                "p": "TestMode",
                "v": "show-error",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1670,
        "y": 780,
        "wires": [
            [
                "f081d30d9d7ac971"
            ]
        ]
    },
    {
        "id": "804c83924018da62",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "#15",
        "outputs": 1,
        "x": 1530,
        "y": 760,
        "wires": [
            [
                "f081d30d9d7ac971"
            ]
        ]
    },
    {
        "id": "bbdd8fa4be023b3a",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "additional endpoints for automated tests",
        "info": "",
        "x": 180,
        "y": 880,
        "wires": []
    },
    {
        "id": "50d9f6c1c0817736",
        "type": "http in",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "url": "cookie-auth-2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 940,
        "wires": [
            [
                "12dafbb6fec1a78a"
            ]
        ]
    },
    {
        "id": "a2841705605044a2",
        "type": "http in",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "url": "cookie-auth-3",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1000,
        "wires": [
            [
                "f4e049b5d35ee243"
            ]
        ]
    },
    {
        "id": "12dafbb6fec1a78a",
        "type": "change",
        "z": "5cd3730f771ed2a6",
        "name": "require impossible role",
        "rules": [
            {
                "t": "set",
                "p": "requiredRole",
                "pt": "msg",
                "to": "god",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 940,
        "wires": [
            [
                "ff07838d8fb0ca15"
            ]
        ]
    },
    {
        "id": "f4e049b5d35ee243",
        "type": "change",
        "z": "5cd3730f771ed2a6",
        "name": "require possible role",
        "rules": [
            {
                "t": "set",
                "p": "requiredRole",
                "pt": "msg",
                "to": "node-red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1000,
        "wires": [
            [
                "ff07838d8fb0ca15"
            ]
        ]
    },
    {
        "id": "ff07838d8fb0ca15",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "cookie auth",
        "outputs": 2,
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "2bf2204d691f9923"
            ],
            [
                "769ffd9e0ff2435a"
            ]
        ]
    },
    {
        "id": "769ffd9e0ff2435a",
        "type": "change",
        "z": "5cd3730f771ed2a6",
        "name": "inform about success",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "successfully authorized",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1060,
        "wires": [
            [
                "2bf2204d691f9923"
            ]
        ]
    },
    {
        "id": "2bf2204d691f9923",
        "type": "http response",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 1060,
        "wires": []
    },
    {
        "id": "13721211c076fcf7",
        "type": "http in",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "url": "cookie-auth-2",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1120,
        "wires": [
            [
                "daedc25eef89a81f"
            ]
        ]
    },
    {
        "id": "0434ddfc4ff6715a",
        "type": "reusable",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "target": "cookie login",
        "outputs": 2,
        "x": 130,
        "y": 1240,
        "wires": [
            [
                "74ce5e8211b999c0"
            ],
            [
                "8dd2aa72353d0661"
            ]
        ]
    },
    {
        "id": "8dd2aa72353d0661",
        "type": "http response",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 1240,
        "wires": []
    },
    {
        "id": "0f08c4fd12b1f5f2",
        "type": "http in",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "url": "cookie-auth-3",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1180,
        "wires": [
            [
                "2960c632afa95f5a"
            ]
        ]
    },
    {
        "id": "daedc25eef89a81f",
        "type": "change",
        "z": "5cd3730f771ed2a6",
        "name": "require impossible role",
        "rules": [
            {
                "t": "set",
                "p": "requiredRole",
                "pt": "msg",
                "to": "god",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1120,
        "wires": [
            [
                "0434ddfc4ff6715a"
            ]
        ]
    },
    {
        "id": "2960c632afa95f5a",
        "type": "change",
        "z": "5cd3730f771ed2a6",
        "name": "require possible role",
        "rules": [
            {
                "t": "set",
                "p": "requiredRole",
                "pt": "msg",
                "to": "node-red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1180,
        "wires": [
            [
                "0434ddfc4ff6715a"
            ]
        ]
    },
    {
        "id": "74ce5e8211b999c0",
        "type": "change",
        "z": "5cd3730f771ed2a6",
        "name": "inform about success",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "successfully authorized",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1240,
        "wires": [
            [
                "8dd2aa72353d0661"
            ]
        ]
    },
    {
        "id": "547f8367f89665e6",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "get with wrong required role",
        "info": "",
        "x": 1460,
        "y": 1700,
        "wires": []
    },
    {
        "id": "a5f4faa55a586407",
        "type": "comment",
        "z": "5cd3730f771ed2a6",
        "name": "get with correct required role",
        "info": "",
        "x": 1460,
        "y": 1840,
        "wires": []
    },
    {
        "id": "9fc69acf61048834",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "076b202b944df375",
            "05ce4a5dcc81e2a3",
            "31c781c2aa8edfd4"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1780,
        "wires": [
            [
                "fdcb432fd969e464"
            ]
        ]
    },
    {
        "id": "076b202b944df375",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1740,
        "wires": [
            [
                "05ce4a5dcc81e2a3"
            ]
        ]
    },
    {
        "id": "05ce4a5dcc81e2a3",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(401)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\nexpect(msg.responseCookies['authorization'].value).to.equal('')\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1740,
        "wires": [
            [
                "fdcb432fd969e464"
            ]
        ]
    },
    {
        "id": "31c781c2aa8edfd4",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url = flow.get('CookieAuthURL') + '-2'\n\nlet Cookie = flow.get('CookieAuthCookie')\n\nmsg.cookies = { authorization:Cookie }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1740,
        "wires": [
            [
                "076b202b944df375"
            ]
        ]
    },
    {
        "id": "9375ef42ab0e8da7",
        "type": "catch",
        "z": "5cd3730f771ed2a6",
        "name": "",
        "scope": [
            "1ede7d4383ba45cb",
            "5ae029a93c198682",
            "2c3149509fc17bfc"
        ],
        "uncaught": false,
        "x": 1510,
        "y": 1920,
        "wires": [
            [
                "c922468a91f62d72"
            ]
        ]
    },
    {
        "id": "1ede7d4383ba45cb",
        "type": "http request",
        "z": "5cd3730f771ed2a6",
        "name": "act",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1650,
        "y": 1880,
        "wires": [
            [
                "5ae029a93c198682"
            ]
        ]
    },
    {
        "id": "5ae029a93c198682",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "assert",
        "func": "let expect = chai.expect\n\nexpect(msg.statusCode).to.equal(200)\nexpect(msg.headers['www-authenticate']).not.to.exist\n\nexpect(msg.responseCookies).to.exist\nexpect(msg.responseCookies['authorization']).to.exist\n\nlet newCookie = msg.responseCookies['authorization'].value\nexpect(newCookie).to.match(/^node-red:\\d+:[0-9a-f]+$/)\n\nlet [newUserId,newExpiration,newDigest] = newCookie.split(':')\n\nlet oldCookie = flow.get('CookieAuthCookie')\nlet [oldUserId,oldExpiration,oldDigest] = oldCookie.split(':')\n\nexpect(newUserId).to.equal(oldUserId)\nexpect(parseInt(newExpiration,10)).to.be.at.least(parseInt(oldExpiration,10))\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "chai",
                "module": "chai"
            }
        ],
        "x": 1770,
        "y": 1880,
        "wires": [
            [
                "c922468a91f62d72"
            ]
        ]
    },
    {
        "id": "2c3149509fc17bfc",
        "type": "function",
        "z": "5cd3730f771ed2a6",
        "name": "arrange",
        "func": "msg.url = flow.get('CookieAuthURL') + '-3'\n\nlet Cookie = flow.get('CookieAuthCookie')\n\nmsg.cookies = { authorization:Cookie }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1880,
        "wires": [
            [
                "1ede7d4383ba45cb"
            ]
        ]
    },
    {
        "id": "c922468a91f62d72",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1920,
        "wires": []
    },
    {
        "id": "fdcb432fd969e464",
        "type": "reusable-out",
        "z": "5cd3730f771ed2a6",
        "name": "return",
        "position": 1,
        "x": 1850,
        "y": 1780,
        "wires": []
    },
    {
        "id": "41cc367b024b0359",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#15",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1880,
        "wires": [
            [
                "2c3149509fc17bfc"
            ]
        ]
    },
    {
        "id": "a1b09a778960c6ee",
        "type": "reusable-in",
        "z": "5cd3730f771ed2a6",
        "name": "#14",
        "info": "describe your reusable flow here",
        "scope": "local",
        "x": 1390,
        "y": 1740,
        "wires": [
            [
                "31c781c2aa8edfd4"
            ]
        ]
    },
    {
        "id": "ec064d975c3f74fe",
        "type": "tls-config",
        "name": "local-server",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]