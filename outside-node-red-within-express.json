[
    {
        "id": "c77fc63b7b5d8602",
        "type": "comment",
        "z": "56af3abb553264d3",
        "name": "if used without \"node-red-within-express\"",
        "info": "",
        "x": 180,
        "y": 520,
        "wires": []
    },
    {
        "id": "8141b7dfdc18bc8a",
        "type": "inject",
        "z": "56af3abb553264d3",
        "name": "at Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 100,
        "y": 580,
        "wires": [
            [
                "de554403c2566545"
            ]
        ]
    },
    {
        "id": "de554403c2566545",
        "type": "component",
        "z": "56af3abb553264d3",
        "name": "load or create UserRegistry",
        "targetComponent": {
            "id": "925fc7269cbe4703",
            "name": "load or create UserRegistry",
            "api": []
        },
        "paramSources": {},
        "statuz": "",
        "statuzType": "str",
        "outputs": 1,
        "outLabels": [
            "default"
        ],
        "x": 320,
        "y": 580,
        "wires": [
            [
                "c56fc609fda78995"
            ]
        ]
    },
    {
        "id": "3854f9bb20843d13",
        "type": "file in",
        "z": "56af3abb553264d3",
        "name": "",
        "filename": "./registeredUsers.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 160,
        "y": 700,
        "wires": [
            [
                "0198d0d32e82591e"
            ]
        ]
    },
    {
        "id": "690568c6a20becea",
        "type": "catch",
        "z": "56af3abb553264d3",
        "name": "",
        "scope": [
            "3854f9bb20843d13",
            "9c9169d8064c88fc"
        ],
        "uncaught": false,
        "x": 110,
        "y": 760,
        "wires": [
            [
                "85e93b749a23c07d"
            ]
        ]
    },
    {
        "id": "7db18657b376e6aa",
        "type": "debug",
        "z": "56af3abb553264d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'could not load user registry'",
        "statusType": "jsonata",
        "x": 510,
        "y": 760,
        "wires": []
    },
    {
        "id": "925fc7269cbe4703",
        "type": "component_in",
        "z": "56af3abb553264d3",
        "name": "load or create UserRegistry",
        "api": [],
        "x": 140,
        "y": 640,
        "wires": [
            [
                "3854f9bb20843d13",
                "66b67483a83c20ce"
            ]
        ]
    },
    {
        "id": "0e0afe10981693e1",
        "type": "component_out",
        "z": "56af3abb553264d3",
        "name": "return",
        "mode": "default",
        "x": 530,
        "y": 640,
        "wires": []
    },
    {
        "id": "c56fc609fda78995",
        "type": "debug",
        "z": "56af3abb553264d3",
        "name": "Status",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'user registry loaded'",
        "statusType": "jsonata",
        "x": 530,
        "y": 580,
        "wires": []
    },
    {
        "id": "85e93b749a23c07d",
        "type": "function",
        "z": "56af3abb553264d3",
        "name": "create in global context",
        "func": "  let UserRegistry = Object.create(null)\n    UserRegistry['node-red'] =  {\n      Roles: ['node-red'],\n      Salt: '4486e8d35b8275020b1301226cc77963',\n      Hash: 'ab2b740ea9148aa4f320af3f3ba60ee2e33bb8039c57eea2b29579ff3f3b16bec2401f19e3c6ed8ad36de432b80b6f973a12c41af5d50738e4bb902d0117df53'\n    }\n  global.set('UserRegistry',UserRegistry)\n\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 760,
        "wires": [
            [
                "7db18657b376e6aa",
                "0e0afe10981693e1"
            ]
        ]
    },
    {
        "id": "762b9eeb2b5aa715",
        "type": "file",
        "z": "56af3abb553264d3",
        "name": "",
        "filename": "./registeredUsers.json",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 420,
        "y": 880,
        "wires": [
            [
                "b07ec65be23263d3"
            ]
        ]
    },
    {
        "id": "15a24ea49049d876",
        "type": "catch",
        "z": "56af3abb553264d3",
        "name": "",
        "scope": [
            "762b9eeb2b5aa715",
            "33c2e31969bad3a8"
        ],
        "uncaught": false,
        "x": 110,
        "y": 1000,
        "wires": [
            [
                "03755ee9c3a590a8",
                "2d8d4fd4deb6b657"
            ]
        ]
    },
    {
        "id": "03755ee9c3a590a8",
        "type": "debug",
        "z": "56af3abb553264d3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'could not write user registry'",
        "statusType": "jsonata",
        "x": 250,
        "y": 1040,
        "wires": []
    },
    {
        "id": "dc6447092581f7d6",
        "type": "component_in",
        "z": "56af3abb553264d3",
        "name": "write UserRegistry",
        "api": [],
        "x": 110,
        "y": 820,
        "wires": [
            [
                "05699a47cb63a34e",
                "6373109762be3238"
            ]
        ]
    },
    {
        "id": "a8f15dd328dfcefd",
        "type": "component_out",
        "z": "56af3abb553264d3",
        "name": "return",
        "mode": "default",
        "x": 530,
        "y": 940,
        "wires": []
    },
    {
        "id": "b07ec65be23263d3",
        "type": "change",
        "z": "56af3abb553264d3",
        "name": "restore payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "_payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "_payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 940,
        "wires": [
            [
                "a8f15dd328dfcefd"
            ]
        ]
    },
    {
        "id": "2d8d4fd4deb6b657",
        "type": "change",
        "z": "56af3abb553264d3",
        "name": "report in payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Internal Server Error'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "500",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "_payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 1000,
        "wires": [
            [
                "a8f15dd328dfcefd"
            ]
        ]
    },
    {
        "id": "0198d0d32e82591e",
        "type": "function",
        "z": "56af3abb553264d3",
        "name": "write to global context",
        "func": "  let UserSet = JSON.parse(msg.payload)                             // may fail!\n\n  let UserRegistry = Object.create(null)\n  for (let UserId in UserSet) {\n    if (UserSet.hasOwnProperty(UserId)) {\n      UserRegistry[UserId.toLowerCase()] = UserSet[UserId]\n    }\n  }\n  global.set('UserRegistry',UserRegistry)\n\n  msg.payload = ''\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 700,
        "wires": [
            [
                "0e0afe10981693e1"
            ]
        ]
    },
    {
        "id": "66b67483a83c20ce",
        "type": "function",
        "z": "56af3abb553264d3",
        "name": "-> catch",
        "func": "// do not pass any msg from here!",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 640,
        "wires": [
            [
                "85e93b749a23c07d"
            ]
        ]
    },
    {
        "id": "05699a47cb63a34e",
        "type": "function",
        "z": "56af3abb553264d3",
        "name": "-> catch",
        "func": "// do not pass any msg from here!",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 820,
        "wires": [
            [
                "2d8d4fd4deb6b657"
            ]
        ]
    },
    {
        "id": "6373109762be3238",
        "type": "function",
        "z": "56af3abb553264d3",
        "name": "read from global context",
        "func": "  let UserRegistry = global.get('UserRegistry')\n\n  let UserSet = {}\n  for (let UserId in UserRegistry) {\n    let UserEntry = Object.assign({},UserRegistry[UserId])\n      delete UserEntry.Password          // never write passwords in plain text!\n    UserSet[UserId] = UserEntry\n  }\n\n  msg.payload = JSON.stringify(UserSet)\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 880,
        "wires": [
            [
                "762b9eeb2b5aa715"
            ]
        ]
    }
]