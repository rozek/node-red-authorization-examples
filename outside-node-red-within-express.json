[
    {
        "id": "a437ea9e9983f2b9",
        "type": "comment",
        "z": "c63466f5ec185814",
        "name": "if used without \"node-red-within-express\"",
        "info": "",
        "x": 180,
        "y": 500,
        "wires": []
    },
    {
        "id": "ed50b5b2e94746c8",
        "type": "inject",
        "z": "c63466f5ec185814",
        "name": "at Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 100,
        "y": 560,
        "wires": [
            [
                "4a4c700ae4ecd934"
            ]
        ]
    },
    {
        "id": "2d98c64a67e881e7",
        "type": "file in",
        "z": "c63466f5ec185814",
        "name": "",
        "filename": "./registeredUsers.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 160,
        "y": 680,
        "wires": [
            [
                "70c82a6e25251a70"
            ]
        ]
    },
    {
        "id": "470b387186d7852a",
        "type": "catch",
        "z": "c63466f5ec185814",
        "name": "",
        "scope": [
            "2d98c64a67e881e7",
            "70c82a6e25251a70"
        ],
        "uncaught": false,
        "x": 110,
        "y": 740,
        "wires": [
            [
                "46809118b7d27252"
            ]
        ]
    },
    {
        "id": "a52bccab8bc183a8",
        "type": "debug",
        "z": "c63466f5ec185814",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'could not load user registry'",
        "statusType": "jsonata",
        "x": 510,
        "y": 740,
        "wires": []
    },
    {
        "id": "3eb566d1907d9b3b",
        "type": "debug",
        "z": "c63466f5ec185814",
        "name": "Status",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'user registry available'",
        "statusType": "jsonata",
        "x": 530,
        "y": 560,
        "wires": []
    },
    {
        "id": "46809118b7d27252",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "create in global context",
        "func": "  let UserRegistry = Object.create(null)\n    UserRegistry['node-red'] =  {\n      Roles: ['node-red'],\n      Salt: '4486e8d35b8275020b1301226cc77963',\n      Hash: 'ab2b740ea9148aa4f320af3f3ba60ee2e33bb8039c57eea2b29579ff3f3b16bec2401f19e3c6ed8ad36de432b80b6f973a12c41af5d50738e4bb902d0117df53'\n    }\n  global.set('UserRegistry',UserRegistry)\n\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 740,
        "wires": [
            [
                "a52bccab8bc183a8",
                "e0b359a7b5f90189"
            ]
        ]
    },
    {
        "id": "a463788d4c5c13ab",
        "type": "file",
        "z": "c63466f5ec185814",
        "name": "",
        "filename": "./registeredUsers.json",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 420,
        "y": 860,
        "wires": [
            [
                "53948a7e0233c789"
            ]
        ]
    },
    {
        "id": "0892a7393f0e2863",
        "type": "catch",
        "z": "c63466f5ec185814",
        "name": "",
        "scope": [
            "a463788d4c5c13ab"
        ],
        "uncaught": false,
        "x": 110,
        "y": 980,
        "wires": [
            [
                "e50a7cafe871861b",
                "d97e0ea28a9f3c81"
            ]
        ]
    },
    {
        "id": "e50a7cafe871861b",
        "type": "debug",
        "z": "c63466f5ec185814",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'could not write user registry'",
        "statusType": "jsonata",
        "x": 250,
        "y": 1020,
        "wires": []
    },
    {
        "id": "53948a7e0233c789",
        "type": "change",
        "z": "c63466f5ec185814",
        "name": "restore payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "_payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "_payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 920,
        "wires": [
            [
                "1ce07b54225e17dd"
            ]
        ]
    },
    {
        "id": "d97e0ea28a9f3c81",
        "type": "change",
        "z": "c63466f5ec185814",
        "name": "report in payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Internal Server Error'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "500",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "_payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 980,
        "wires": [
            [
                "1ce07b54225e17dd"
            ]
        ]
    },
    {
        "id": "70c82a6e25251a70",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "write to global context",
        "func": "  let UserSet = JSON.parse(msg.payload)                             // may fail!\n\n  let UserRegistry = Object.create(null)\n  for (let UserId in UserSet) {\n    if (UserSet.hasOwnProperty(UserId)) {\n      if ((UserId.indexOf('/') >= 0) || (UserId.indexOf(':') >= 0)) {\n        throw 'Invalid character in UserId found'\n      }\n      \n      UserRegistry[UserId.toLowerCase()] = UserSet[UserId]\n    }\n  }\n  global.set('UserRegistry',UserRegistry)\n\n  msg.payload = ''\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 680,
        "wires": [
            [
                "e0b359a7b5f90189"
            ]
        ]
    },
    {
        "id": "4f110197c9f2a334",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "→ catch",
        "func": "// do not pass any msg from here!",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 620,
        "wires": [
            [
                "46809118b7d27252"
            ]
        ]
    },
    {
        "id": "687ebf9f0226b7dc",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "→ catch",
        "func": "// do not pass any msg from here!",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 800,
        "wires": [
            [
                "d97e0ea28a9f3c81"
            ]
        ]
    },
    {
        "id": "848c6ddfb76643e4",
        "type": "function",
        "z": "c63466f5ec185814",
        "name": "read from global context",
        "func": "  let UserRegistry = global.get('UserRegistry') || Object.create(null)\n  let UserSet = {}\n  for (let UserId in UserRegistry) {\n    if (UserRegistry[UserId] == null) {\n      UserSet[UserId] = null\n    } else {\n      let UserEntry = Object.assign({},UserRegistry[UserId])\n        delete UserEntry.Password     // never write passwords in plain text!\n      UserSet[UserId] = UserEntry\n    }\n  }\n\n  msg.payload = JSON.stringify(UserSet)\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 860,
        "wires": [
            [
                "a463788d4c5c13ab"
            ]
        ]
    },
    {
        "id": "e0b359a7b5f90189",
        "type": "reusable-out",
        "z": "c63466f5ec185814",
        "name": "return",
        "position": 1,
        "x": 530,
        "y": 620,
        "wires": []
    },
    {
        "id": "1ce07b54225e17dd",
        "type": "reusable-out",
        "z": "c63466f5ec185814",
        "name": "return",
        "position": 1,
        "x": 530,
        "y": 920,
        "wires": []
    },
    {
        "id": "254d667c7cc38a4e",
        "type": "reusable-in",
        "z": "c63466f5ec185814",
        "name": "load or create UserRegistry",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "4f110197c9f2a334",
                "2d98c64a67e881e7"
            ]
        ]
    },
    {
        "id": "e50f6e5eb55f7d87",
        "type": "reusable-in",
        "z": "c63466f5ec185814",
        "name": "write UserRegistry",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "687ebf9f0226b7dc",
                "848c6ddfb76643e4"
            ]
        ]
    },
    {
        "id": "4a4c700ae4ecd934",
        "type": "reusable",
        "z": "c63466f5ec185814",
        "name": "",
        "target": "load or create userregistry",
        "outputs": 1,
        "x": 320,
        "y": 560,
        "wires": [
            [
                "3eb566d1907d9b3b"
            ]
        ]
    }
]